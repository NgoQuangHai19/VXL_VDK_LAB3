
Lab3_VXL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fd8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080030e4  080030e4  000130e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003108  08003108  00020058  2**0
                  CONTENTS
  4 .ARM          00000000  08003108  08003108  00020058  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003108  08003108  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003108  08003108  00013108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800310c  0800310c  0001310c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  08003110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000058  08003168  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08003168  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a1d7  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e37  00000000  00000000  0002a258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  0002c090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b0  00000000  00000000  0002cb80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172f1  00000000  00000000  0002d530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cdc8  00000000  00000000  00044821  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000823f1  00000000  00000000  000515e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d39da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029ec  00000000  00000000  000d3a30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000058 	.word	0x20000058
 8000128:	00000000 	.word	0x00000000
 800012c:	080030cc 	.word	0x080030cc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000005c 	.word	0x2000005c
 8000148:	080030cc 	.word	0x080030cc

0800014c <subKeyProcess>:

int TimerForKeyPress[NUMBER_BUTTON] =  {100,100,100};
int button_flag[NUMBER_BUTTON] =  {0,0,0};
int button_pressed_1s_flag[NUMBER_BUTTON] =  {0,0,0};

void subKeyProcess(int i){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	button_flag[i] = 1;
 8000154:	4a04      	ldr	r2, [pc, #16]	; (8000168 <subKeyProcess+0x1c>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	2101      	movs	r1, #1
 800015a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800015e:	bf00      	nop
 8000160:	370c      	adds	r7, #12
 8000162:	46bd      	mov	sp, r7
 8000164:	bc80      	pop	{r7}
 8000166:	4770      	bx	lr
 8000168:	20000074 	.word	0x20000074

0800016c <getKeyInput>:
void getKeyInput(){
 800016c:	b580      	push	{r7, lr}
 800016e:	b082      	sub	sp, #8
 8000170:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUMBER_BUTTON; i++){
 8000172:	2300      	movs	r3, #0
 8000174:	607b      	str	r3, [r7, #4]
 8000176:	e099      	b.n	80002ac <getKeyInput+0x140>
			KeyReg0[i] = KeyReg1[i];
 8000178:	4a51      	ldr	r2, [pc, #324]	; (80002c0 <getKeyInput+0x154>)
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000180:	4950      	ldr	r1, [pc, #320]	; (80002c4 <getKeyInput+0x158>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			KeyReg1[i] = KeyReg2[i];
 8000188:	4a4f      	ldr	r2, [pc, #316]	; (80002c8 <getKeyInput+0x15c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000190:	494b      	ldr	r1, [pc, #300]	; (80002c0 <getKeyInput+0x154>)
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(i==0) KeyReg2[i] = HAL_GPIO_ReadPin(SELECT_GPIO_Port, SELECT_Pin);
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	2b00      	cmp	r3, #0
 800019c:	d109      	bne.n	80001b2 <getKeyInput+0x46>
 800019e:	2108      	movs	r1, #8
 80001a0:	484a      	ldr	r0, [pc, #296]	; (80002cc <getKeyInput+0x160>)
 80001a2:	f001 ff5b 	bl	800205c <HAL_GPIO_ReadPin>
 80001a6:	4603      	mov	r3, r0
 80001a8:	4619      	mov	r1, r3
 80001aa:	4a47      	ldr	r2, [pc, #284]	; (80002c8 <getKeyInput+0x15c>)
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if(i==1) KeyReg2[i] = HAL_GPIO_ReadPin(MODIFY_GPIO_Port, MODIFY_Pin);
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	2b01      	cmp	r3, #1
 80001b6:	d109      	bne.n	80001cc <getKeyInput+0x60>
 80001b8:	2110      	movs	r1, #16
 80001ba:	4844      	ldr	r0, [pc, #272]	; (80002cc <getKeyInput+0x160>)
 80001bc:	f001 ff4e 	bl	800205c <HAL_GPIO_ReadPin>
 80001c0:	4603      	mov	r3, r0
 80001c2:	4619      	mov	r1, r3
 80001c4:	4a40      	ldr	r2, [pc, #256]	; (80002c8 <getKeyInput+0x15c>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if(i==2) KeyReg2[i] = HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin);
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	2b02      	cmp	r3, #2
 80001d0:	d109      	bne.n	80001e6 <getKeyInput+0x7a>
 80001d2:	2120      	movs	r1, #32
 80001d4:	483d      	ldr	r0, [pc, #244]	; (80002cc <getKeyInput+0x160>)
 80001d6:	f001 ff41 	bl	800205c <HAL_GPIO_ReadPin>
 80001da:	4603      	mov	r3, r0
 80001dc:	4619      	mov	r1, r3
 80001de:	4a3a      	ldr	r2, [pc, #232]	; (80002c8 <getKeyInput+0x15c>)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i]))
 80001e6:	4a37      	ldr	r2, [pc, #220]	; (80002c4 <getKeyInput+0x158>)
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001ee:	4934      	ldr	r1, [pc, #208]	; (80002c0 <getKeyInput+0x154>)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001f6:	429a      	cmp	r2, r3
 80001f8:	d155      	bne.n	80002a6 <getKeyInput+0x13a>
 80001fa:	4a31      	ldr	r2, [pc, #196]	; (80002c0 <getKeyInput+0x154>)
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000202:	4931      	ldr	r1, [pc, #196]	; (80002c8 <getKeyInput+0x15c>)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800020a:	429a      	cmp	r2, r3
 800020c:	d14b      	bne.n	80002a6 <getKeyInput+0x13a>
			{
				if(KeyReg3[i] != KeyReg2[i])
 800020e:	4a30      	ldr	r2, [pc, #192]	; (80002d0 <getKeyInput+0x164>)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000216:	492c      	ldr	r1, [pc, #176]	; (80002c8 <getKeyInput+0x15c>)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800021e:	429a      	cmp	r2, r3
 8000220:	d01c      	beq.n	800025c <getKeyInput+0xf0>
				{
					KeyReg3[i] = KeyReg2[i];
 8000222:	4a29      	ldr	r2, [pc, #164]	; (80002c8 <getKeyInput+0x15c>)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022a:	4929      	ldr	r1, [pc, #164]	; (80002d0 <getKeyInput+0x164>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(KeyReg2[i] == PRESSED_STATE){
 8000232:	4a25      	ldr	r2, [pc, #148]	; (80002c8 <getKeyInput+0x15c>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800023a:	2b00      	cmp	r3, #0
 800023c:	d108      	bne.n	8000250 <getKeyInput+0xe4>
						subKeyProcess(i);
 800023e:	6878      	ldr	r0, [r7, #4]
 8000240:	f7ff ff84 	bl	800014c <subKeyProcess>
						TimerForKeyPress[i] = 100;
 8000244:	4a23      	ldr	r2, [pc, #140]	; (80002d4 <getKeyInput+0x168>)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	2164      	movs	r1, #100	; 0x64
 800024a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800024e:	e02a      	b.n	80002a6 <getKeyInput+0x13a>
					}
					else button_pressed_1s_flag[i]=0;
 8000250:	4a21      	ldr	r2, [pc, #132]	; (80002d8 <getKeyInput+0x16c>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	2100      	movs	r1, #0
 8000256:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800025a:	e024      	b.n	80002a6 <getKeyInput+0x13a>
				}

				else
				{
					TimerForKeyPress[i]--;
 800025c:	4a1d      	ldr	r2, [pc, #116]	; (80002d4 <getKeyInput+0x168>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000264:	1e5a      	subs	r2, r3, #1
 8000266:	491b      	ldr	r1, [pc, #108]	; (80002d4 <getKeyInput+0x168>)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(TimerForKeyPress[i] == 0){
 800026e:	4a19      	ldr	r2, [pc, #100]	; (80002d4 <getKeyInput+0x168>)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000276:	2b00      	cmp	r3, #0
 8000278:	d115      	bne.n	80002a6 <getKeyInput+0x13a>
						if(KeyReg2[i] == PRESSED_STATE) {
 800027a:	4a13      	ldr	r2, [pc, #76]	; (80002c8 <getKeyInput+0x15c>)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d105      	bne.n	8000292 <getKeyInput+0x126>
							button_pressed_1s_flag[i]=1;
 8000286:	4a14      	ldr	r2, [pc, #80]	; (80002d8 <getKeyInput+0x16c>)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2101      	movs	r1, #1
 800028c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000290:	e004      	b.n	800029c <getKeyInput+0x130>
						}
						else {
							button_pressed_1s_flag[i]=0;
 8000292:	4a11      	ldr	r2, [pc, #68]	; (80002d8 <getKeyInput+0x16c>)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	2100      	movs	r1, #0
 8000298:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						TimerForKeyPress[i]=100;
 800029c:	4a0d      	ldr	r2, [pc, #52]	; (80002d4 <getKeyInput+0x168>)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	2164      	movs	r1, #100	; 0x64
 80002a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < NUMBER_BUTTON; i++){
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	3301      	adds	r3, #1
 80002aa:	607b      	str	r3, [r7, #4]
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2b02      	cmp	r3, #2
 80002b0:	f77f af62 	ble.w	8000178 <getKeyInput+0xc>
			}
	}



}
 80002b4:	bf00      	nop
 80002b6:	bf00      	nop
 80002b8:	3708      	adds	r7, #8
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	2000000c 	.word	0x2000000c
 80002c4:	20000000 	.word	0x20000000
 80002c8:	20000018 	.word	0x20000018
 80002cc:	40010800 	.word	0x40010800
 80002d0:	20000024 	.word	0x20000024
 80002d4:	20000030 	.word	0x20000030
 80002d8:	20000080 	.word	0x20000080

080002dc <display>:
 *      Author: AD
 */
#include "display7Segment.h"

void display(int led, GPIO_PinState a, GPIO_PinState b, GPIO_PinState c,
		GPIO_PinState d, GPIO_PinState e, GPIO_PinState f,GPIO_PinState g) {
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
 80002e4:	4608      	mov	r0, r1
 80002e6:	4611      	mov	r1, r2
 80002e8:	461a      	mov	r2, r3
 80002ea:	4603      	mov	r3, r0
 80002ec:	70fb      	strb	r3, [r7, #3]
 80002ee:	460b      	mov	r3, r1
 80002f0:	70bb      	strb	r3, [r7, #2]
 80002f2:	4613      	mov	r3, r2
 80002f4:	707b      	strb	r3, [r7, #1]
	if(led == LED_7SEG_12){
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d129      	bne.n	8000350 <display+0x74>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, a);
 80002fc:	78fb      	ldrb	r3, [r7, #3]
 80002fe:	461a      	mov	r2, r3
 8000300:	2101      	movs	r1, #1
 8000302:	482f      	ldr	r0, [pc, #188]	; (80003c0 <display+0xe4>)
 8000304:	f001 fec1 	bl	800208a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, b);
 8000308:	78bb      	ldrb	r3, [r7, #2]
 800030a:	461a      	mov	r2, r3
 800030c:	2102      	movs	r1, #2
 800030e:	482c      	ldr	r0, [pc, #176]	; (80003c0 <display+0xe4>)
 8000310:	f001 febb 	bl	800208a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, c);
 8000314:	787b      	ldrb	r3, [r7, #1]
 8000316:	461a      	mov	r2, r3
 8000318:	2104      	movs	r1, #4
 800031a:	4829      	ldr	r0, [pc, #164]	; (80003c0 <display+0xe4>)
 800031c:	f001 feb5 	bl	800208a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, d);
 8000320:	7c3b      	ldrb	r3, [r7, #16]
 8000322:	461a      	mov	r2, r3
 8000324:	2108      	movs	r1, #8
 8000326:	4826      	ldr	r0, [pc, #152]	; (80003c0 <display+0xe4>)
 8000328:	f001 feaf 	bl	800208a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, e);
 800032c:	7d3b      	ldrb	r3, [r7, #20]
 800032e:	461a      	mov	r2, r3
 8000330:	2110      	movs	r1, #16
 8000332:	4823      	ldr	r0, [pc, #140]	; (80003c0 <display+0xe4>)
 8000334:	f001 fea9 	bl	800208a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, f);
 8000338:	7e3b      	ldrb	r3, [r7, #24]
 800033a:	461a      	mov	r2, r3
 800033c:	2120      	movs	r1, #32
 800033e:	4820      	ldr	r0, [pc, #128]	; (80003c0 <display+0xe4>)
 8000340:	f001 fea3 	bl	800208a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, g);
 8000344:	7f3b      	ldrb	r3, [r7, #28]
 8000346:	461a      	mov	r2, r3
 8000348:	2140      	movs	r1, #64	; 0x40
 800034a:	481d      	ldr	r0, [pc, #116]	; (80003c0 <display+0xe4>)
 800034c:	f001 fe9d 	bl	800208a <HAL_GPIO_WritePin>
	}
	if(led == LED_7SEG_34){
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	2b01      	cmp	r3, #1
 8000354:	d12f      	bne.n	80003b6 <display+0xda>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, a);
 8000356:	78fb      	ldrb	r3, [r7, #3]
 8000358:	461a      	mov	r2, r3
 800035a:	2180      	movs	r1, #128	; 0x80
 800035c:	4818      	ldr	r0, [pc, #96]	; (80003c0 <display+0xe4>)
 800035e:	f001 fe94 	bl	800208a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, b);
 8000362:	78bb      	ldrb	r3, [r7, #2]
 8000364:	461a      	mov	r2, r3
 8000366:	f44f 7180 	mov.w	r1, #256	; 0x100
 800036a:	4815      	ldr	r0, [pc, #84]	; (80003c0 <display+0xe4>)
 800036c:	f001 fe8d 	bl	800208a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, c);
 8000370:	787b      	ldrb	r3, [r7, #1]
 8000372:	461a      	mov	r2, r3
 8000374:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000378:	4811      	ldr	r0, [pc, #68]	; (80003c0 <display+0xe4>)
 800037a:	f001 fe86 	bl	800208a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, d);
 800037e:	7c3b      	ldrb	r3, [r7, #16]
 8000380:	461a      	mov	r2, r3
 8000382:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000386:	480e      	ldr	r0, [pc, #56]	; (80003c0 <display+0xe4>)
 8000388:	f001 fe7f 	bl	800208a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, e);
 800038c:	7d3b      	ldrb	r3, [r7, #20]
 800038e:	461a      	mov	r2, r3
 8000390:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000394:	480a      	ldr	r0, [pc, #40]	; (80003c0 <display+0xe4>)
 8000396:	f001 fe78 	bl	800208a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, f);
 800039a:	7e3b      	ldrb	r3, [r7, #24]
 800039c:	461a      	mov	r2, r3
 800039e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003a2:	4807      	ldr	r0, [pc, #28]	; (80003c0 <display+0xe4>)
 80003a4:	f001 fe71 	bl	800208a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, g);
 80003a8:	7f3b      	ldrb	r3, [r7, #28]
 80003aa:	461a      	mov	r2, r3
 80003ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003b0:	4803      	ldr	r0, [pc, #12]	; (80003c0 <display+0xe4>)
 80003b2:	f001 fe6a 	bl	800208a <HAL_GPIO_WritePin>
	}
  }
 80003b6:	bf00      	nop
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	40010c00 	.word	0x40010c00

080003c4 <display7Segment12>:

void display7Segment12(int state){
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b086      	sub	sp, #24
 80003c8:	af04      	add	r7, sp, #16
 80003ca:	6078      	str	r0, [r7, #4]
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	2b09      	cmp	r3, #9
 80003d0:	f200 80ae 	bhi.w	8000530 <display7Segment12+0x16c>
 80003d4:	a201      	add	r2, pc, #4	; (adr r2, 80003dc <display7Segment12+0x18>)
 80003d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003da:	bf00      	nop
 80003dc:	08000405 	.word	0x08000405
 80003e0:	08000423 	.word	0x08000423
 80003e4:	08000441 	.word	0x08000441
 80003e8:	0800045f 	.word	0x0800045f
 80003ec:	0800047d 	.word	0x0800047d
 80003f0:	0800049b 	.word	0x0800049b
 80003f4:	080004b9 	.word	0x080004b9
 80003f8:	080004d7 	.word	0x080004d7
 80003fc:	080004f5 	.word	0x080004f5
 8000400:	08000513 	.word	0x08000513

	 switch (state) {
	        case 0:
	            display(LED_7SEG_12, 0, 0, 0, 0, 0, 0, 1);
 8000404:	2301      	movs	r3, #1
 8000406:	9303      	str	r3, [sp, #12]
 8000408:	2300      	movs	r3, #0
 800040a:	9302      	str	r3, [sp, #8]
 800040c:	2300      	movs	r3, #0
 800040e:	9301      	str	r3, [sp, #4]
 8000410:	2300      	movs	r3, #0
 8000412:	9300      	str	r3, [sp, #0]
 8000414:	2300      	movs	r3, #0
 8000416:	2200      	movs	r2, #0
 8000418:	2100      	movs	r1, #0
 800041a:	2000      	movs	r0, #0
 800041c:	f7ff ff5e 	bl	80002dc <display>
	            break;
 8000420:	e095      	b.n	800054e <display7Segment12+0x18a>
	        case 1:
	            display(LED_7SEG_12, 1, 0, 0, 1, 1, 1, 1);
 8000422:	2301      	movs	r3, #1
 8000424:	9303      	str	r3, [sp, #12]
 8000426:	2301      	movs	r3, #1
 8000428:	9302      	str	r3, [sp, #8]
 800042a:	2301      	movs	r3, #1
 800042c:	9301      	str	r3, [sp, #4]
 800042e:	2301      	movs	r3, #1
 8000430:	9300      	str	r3, [sp, #0]
 8000432:	2300      	movs	r3, #0
 8000434:	2200      	movs	r2, #0
 8000436:	2101      	movs	r1, #1
 8000438:	2000      	movs	r0, #0
 800043a:	f7ff ff4f 	bl	80002dc <display>
	            break;
 800043e:	e086      	b.n	800054e <display7Segment12+0x18a>
	        case 2:
	            display(LED_7SEG_12, 0, 0, 1, 0, 0, 1, 0);
 8000440:	2300      	movs	r3, #0
 8000442:	9303      	str	r3, [sp, #12]
 8000444:	2301      	movs	r3, #1
 8000446:	9302      	str	r3, [sp, #8]
 8000448:	2300      	movs	r3, #0
 800044a:	9301      	str	r3, [sp, #4]
 800044c:	2300      	movs	r3, #0
 800044e:	9300      	str	r3, [sp, #0]
 8000450:	2301      	movs	r3, #1
 8000452:	2200      	movs	r2, #0
 8000454:	2100      	movs	r1, #0
 8000456:	2000      	movs	r0, #0
 8000458:	f7ff ff40 	bl	80002dc <display>
	            break;
 800045c:	e077      	b.n	800054e <display7Segment12+0x18a>
	        case 3:
	            display(LED_7SEG_12, 0, 0, 0, 0, 1, 1, 0);
 800045e:	2300      	movs	r3, #0
 8000460:	9303      	str	r3, [sp, #12]
 8000462:	2301      	movs	r3, #1
 8000464:	9302      	str	r3, [sp, #8]
 8000466:	2301      	movs	r3, #1
 8000468:	9301      	str	r3, [sp, #4]
 800046a:	2300      	movs	r3, #0
 800046c:	9300      	str	r3, [sp, #0]
 800046e:	2300      	movs	r3, #0
 8000470:	2200      	movs	r2, #0
 8000472:	2100      	movs	r1, #0
 8000474:	2000      	movs	r0, #0
 8000476:	f7ff ff31 	bl	80002dc <display>
	            break;
 800047a:	e068      	b.n	800054e <display7Segment12+0x18a>
	        case 4:
	            display(LED_7SEG_12, 1, 0, 0, 1, 1, 0, 0);
 800047c:	2300      	movs	r3, #0
 800047e:	9303      	str	r3, [sp, #12]
 8000480:	2300      	movs	r3, #0
 8000482:	9302      	str	r3, [sp, #8]
 8000484:	2301      	movs	r3, #1
 8000486:	9301      	str	r3, [sp, #4]
 8000488:	2301      	movs	r3, #1
 800048a:	9300      	str	r3, [sp, #0]
 800048c:	2300      	movs	r3, #0
 800048e:	2200      	movs	r2, #0
 8000490:	2101      	movs	r1, #1
 8000492:	2000      	movs	r0, #0
 8000494:	f7ff ff22 	bl	80002dc <display>
	            break;
 8000498:	e059      	b.n	800054e <display7Segment12+0x18a>
	        case 5:
	            display(LED_7SEG_12, 0, 1, 0, 0, 1, 0, 0);
 800049a:	2300      	movs	r3, #0
 800049c:	9303      	str	r3, [sp, #12]
 800049e:	2300      	movs	r3, #0
 80004a0:	9302      	str	r3, [sp, #8]
 80004a2:	2301      	movs	r3, #1
 80004a4:	9301      	str	r3, [sp, #4]
 80004a6:	2300      	movs	r3, #0
 80004a8:	9300      	str	r3, [sp, #0]
 80004aa:	2300      	movs	r3, #0
 80004ac:	2201      	movs	r2, #1
 80004ae:	2100      	movs	r1, #0
 80004b0:	2000      	movs	r0, #0
 80004b2:	f7ff ff13 	bl	80002dc <display>
	            break;
 80004b6:	e04a      	b.n	800054e <display7Segment12+0x18a>
	        case 6:
	            display(LED_7SEG_12, 0, 1, 0, 0, 0, 0, 0);
 80004b8:	2300      	movs	r3, #0
 80004ba:	9303      	str	r3, [sp, #12]
 80004bc:	2300      	movs	r3, #0
 80004be:	9302      	str	r3, [sp, #8]
 80004c0:	2300      	movs	r3, #0
 80004c2:	9301      	str	r3, [sp, #4]
 80004c4:	2300      	movs	r3, #0
 80004c6:	9300      	str	r3, [sp, #0]
 80004c8:	2300      	movs	r3, #0
 80004ca:	2201      	movs	r2, #1
 80004cc:	2100      	movs	r1, #0
 80004ce:	2000      	movs	r0, #0
 80004d0:	f7ff ff04 	bl	80002dc <display>
	            break;
 80004d4:	e03b      	b.n	800054e <display7Segment12+0x18a>
	        case 7:
	            display(LED_7SEG_12, 0, 0, 0, 1, 1, 1, 1);
 80004d6:	2301      	movs	r3, #1
 80004d8:	9303      	str	r3, [sp, #12]
 80004da:	2301      	movs	r3, #1
 80004dc:	9302      	str	r3, [sp, #8]
 80004de:	2301      	movs	r3, #1
 80004e0:	9301      	str	r3, [sp, #4]
 80004e2:	2301      	movs	r3, #1
 80004e4:	9300      	str	r3, [sp, #0]
 80004e6:	2300      	movs	r3, #0
 80004e8:	2200      	movs	r2, #0
 80004ea:	2100      	movs	r1, #0
 80004ec:	2000      	movs	r0, #0
 80004ee:	f7ff fef5 	bl	80002dc <display>
	            break;
 80004f2:	e02c      	b.n	800054e <display7Segment12+0x18a>
	        case 8:
	            display(LED_7SEG_12, 0, 0, 0, 0, 0, 0, 0);
 80004f4:	2300      	movs	r3, #0
 80004f6:	9303      	str	r3, [sp, #12]
 80004f8:	2300      	movs	r3, #0
 80004fa:	9302      	str	r3, [sp, #8]
 80004fc:	2300      	movs	r3, #0
 80004fe:	9301      	str	r3, [sp, #4]
 8000500:	2300      	movs	r3, #0
 8000502:	9300      	str	r3, [sp, #0]
 8000504:	2300      	movs	r3, #0
 8000506:	2200      	movs	r2, #0
 8000508:	2100      	movs	r1, #0
 800050a:	2000      	movs	r0, #0
 800050c:	f7ff fee6 	bl	80002dc <display>
	            break;
 8000510:	e01d      	b.n	800054e <display7Segment12+0x18a>
	        case 9:
	            display(LED_7SEG_12, 0, 0, 0, 0, 1, 0, 0);
 8000512:	2300      	movs	r3, #0
 8000514:	9303      	str	r3, [sp, #12]
 8000516:	2300      	movs	r3, #0
 8000518:	9302      	str	r3, [sp, #8]
 800051a:	2301      	movs	r3, #1
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	2300      	movs	r3, #0
 8000520:	9300      	str	r3, [sp, #0]
 8000522:	2300      	movs	r3, #0
 8000524:	2200      	movs	r2, #0
 8000526:	2100      	movs	r1, #0
 8000528:	2000      	movs	r0, #0
 800052a:	f7ff fed7 	bl	80002dc <display>
	            break;
 800052e:	e00e      	b.n	800054e <display7Segment12+0x18a>
	        default:
	            display(LED_7SEG_12, 1, 1, 1, 1, 1, 1, 1);
 8000530:	2301      	movs	r3, #1
 8000532:	9303      	str	r3, [sp, #12]
 8000534:	2301      	movs	r3, #1
 8000536:	9302      	str	r3, [sp, #8]
 8000538:	2301      	movs	r3, #1
 800053a:	9301      	str	r3, [sp, #4]
 800053c:	2301      	movs	r3, #1
 800053e:	9300      	str	r3, [sp, #0]
 8000540:	2301      	movs	r3, #1
 8000542:	2201      	movs	r2, #1
 8000544:	2101      	movs	r1, #1
 8000546:	2000      	movs	r0, #0
 8000548:	f7ff fec8 	bl	80002dc <display>
	        }

}
 800054c:	bf00      	nop
 800054e:	bf00      	nop
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop

08000558 <display7Segment34>:

void display7Segment34(int state ){
 8000558:	b580      	push	{r7, lr}
 800055a:	b086      	sub	sp, #24
 800055c:	af04      	add	r7, sp, #16
 800055e:	6078      	str	r0, [r7, #4]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2b09      	cmp	r3, #9
 8000564:	f200 80ae 	bhi.w	80006c4 <display7Segment34+0x16c>
 8000568:	a201      	add	r2, pc, #4	; (adr r2, 8000570 <display7Segment34+0x18>)
 800056a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800056e:	bf00      	nop
 8000570:	08000599 	.word	0x08000599
 8000574:	080005b7 	.word	0x080005b7
 8000578:	080005d5 	.word	0x080005d5
 800057c:	080005f3 	.word	0x080005f3
 8000580:	08000611 	.word	0x08000611
 8000584:	0800062f 	.word	0x0800062f
 8000588:	0800064d 	.word	0x0800064d
 800058c:	0800066b 	.word	0x0800066b
 8000590:	08000689 	.word	0x08000689
 8000594:	080006a7 	.word	0x080006a7
	 switch (state) {
	        case 0:
	            display(LED_7SEG_34, 0, 0, 0, 0, 0, 0, 1);
 8000598:	2301      	movs	r3, #1
 800059a:	9303      	str	r3, [sp, #12]
 800059c:	2300      	movs	r3, #0
 800059e:	9302      	str	r3, [sp, #8]
 80005a0:	2300      	movs	r3, #0
 80005a2:	9301      	str	r3, [sp, #4]
 80005a4:	2300      	movs	r3, #0
 80005a6:	9300      	str	r3, [sp, #0]
 80005a8:	2300      	movs	r3, #0
 80005aa:	2200      	movs	r2, #0
 80005ac:	2100      	movs	r1, #0
 80005ae:	2001      	movs	r0, #1
 80005b0:	f7ff fe94 	bl	80002dc <display>
	            break;
 80005b4:	e095      	b.n	80006e2 <display7Segment34+0x18a>
	        case 1:
	            display(LED_7SEG_34, 1, 0, 0, 1, 1, 1, 1);
 80005b6:	2301      	movs	r3, #1
 80005b8:	9303      	str	r3, [sp, #12]
 80005ba:	2301      	movs	r3, #1
 80005bc:	9302      	str	r3, [sp, #8]
 80005be:	2301      	movs	r3, #1
 80005c0:	9301      	str	r3, [sp, #4]
 80005c2:	2301      	movs	r3, #1
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	2300      	movs	r3, #0
 80005c8:	2200      	movs	r2, #0
 80005ca:	2101      	movs	r1, #1
 80005cc:	2001      	movs	r0, #1
 80005ce:	f7ff fe85 	bl	80002dc <display>
	            break;
 80005d2:	e086      	b.n	80006e2 <display7Segment34+0x18a>
	        case 2:
	            display(LED_7SEG_34, 0, 0, 1, 0, 0, 1, 0);
 80005d4:	2300      	movs	r3, #0
 80005d6:	9303      	str	r3, [sp, #12]
 80005d8:	2301      	movs	r3, #1
 80005da:	9302      	str	r3, [sp, #8]
 80005dc:	2300      	movs	r3, #0
 80005de:	9301      	str	r3, [sp, #4]
 80005e0:	2300      	movs	r3, #0
 80005e2:	9300      	str	r3, [sp, #0]
 80005e4:	2301      	movs	r3, #1
 80005e6:	2200      	movs	r2, #0
 80005e8:	2100      	movs	r1, #0
 80005ea:	2001      	movs	r0, #1
 80005ec:	f7ff fe76 	bl	80002dc <display>
	            break;
 80005f0:	e077      	b.n	80006e2 <display7Segment34+0x18a>
	        case 3:
	            display(LED_7SEG_34, 0, 0, 0, 0, 1, 1, 0);
 80005f2:	2300      	movs	r3, #0
 80005f4:	9303      	str	r3, [sp, #12]
 80005f6:	2301      	movs	r3, #1
 80005f8:	9302      	str	r3, [sp, #8]
 80005fa:	2301      	movs	r3, #1
 80005fc:	9301      	str	r3, [sp, #4]
 80005fe:	2300      	movs	r3, #0
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2300      	movs	r3, #0
 8000604:	2200      	movs	r2, #0
 8000606:	2100      	movs	r1, #0
 8000608:	2001      	movs	r0, #1
 800060a:	f7ff fe67 	bl	80002dc <display>
	            break;
 800060e:	e068      	b.n	80006e2 <display7Segment34+0x18a>
	        case 4:
	            display(LED_7SEG_34, 1, 0, 0, 1, 1, 0, 0);
 8000610:	2300      	movs	r3, #0
 8000612:	9303      	str	r3, [sp, #12]
 8000614:	2300      	movs	r3, #0
 8000616:	9302      	str	r3, [sp, #8]
 8000618:	2301      	movs	r3, #1
 800061a:	9301      	str	r3, [sp, #4]
 800061c:	2301      	movs	r3, #1
 800061e:	9300      	str	r3, [sp, #0]
 8000620:	2300      	movs	r3, #0
 8000622:	2200      	movs	r2, #0
 8000624:	2101      	movs	r1, #1
 8000626:	2001      	movs	r0, #1
 8000628:	f7ff fe58 	bl	80002dc <display>
	            break;
 800062c:	e059      	b.n	80006e2 <display7Segment34+0x18a>
	        case 5:
	            display(LED_7SEG_34, 0, 1, 0, 0, 1, 0, 0);
 800062e:	2300      	movs	r3, #0
 8000630:	9303      	str	r3, [sp, #12]
 8000632:	2300      	movs	r3, #0
 8000634:	9302      	str	r3, [sp, #8]
 8000636:	2301      	movs	r3, #1
 8000638:	9301      	str	r3, [sp, #4]
 800063a:	2300      	movs	r3, #0
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	2300      	movs	r3, #0
 8000640:	2201      	movs	r2, #1
 8000642:	2100      	movs	r1, #0
 8000644:	2001      	movs	r0, #1
 8000646:	f7ff fe49 	bl	80002dc <display>
	            break;
 800064a:	e04a      	b.n	80006e2 <display7Segment34+0x18a>
	        case 6:
	            display(LED_7SEG_34, 0, 1, 0, 0, 0, 0, 0);
 800064c:	2300      	movs	r3, #0
 800064e:	9303      	str	r3, [sp, #12]
 8000650:	2300      	movs	r3, #0
 8000652:	9302      	str	r3, [sp, #8]
 8000654:	2300      	movs	r3, #0
 8000656:	9301      	str	r3, [sp, #4]
 8000658:	2300      	movs	r3, #0
 800065a:	9300      	str	r3, [sp, #0]
 800065c:	2300      	movs	r3, #0
 800065e:	2201      	movs	r2, #1
 8000660:	2100      	movs	r1, #0
 8000662:	2001      	movs	r0, #1
 8000664:	f7ff fe3a 	bl	80002dc <display>
	            break;
 8000668:	e03b      	b.n	80006e2 <display7Segment34+0x18a>
	        case 7:
	            display(LED_7SEG_34, 0, 0, 0, 1, 1, 1, 1);
 800066a:	2301      	movs	r3, #1
 800066c:	9303      	str	r3, [sp, #12]
 800066e:	2301      	movs	r3, #1
 8000670:	9302      	str	r3, [sp, #8]
 8000672:	2301      	movs	r3, #1
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	2301      	movs	r3, #1
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	2300      	movs	r3, #0
 800067c:	2200      	movs	r2, #0
 800067e:	2100      	movs	r1, #0
 8000680:	2001      	movs	r0, #1
 8000682:	f7ff fe2b 	bl	80002dc <display>
	            break;
 8000686:	e02c      	b.n	80006e2 <display7Segment34+0x18a>
	        case 8:
	            display(LED_7SEG_34, 0, 0, 0, 0, 0, 0, 0);
 8000688:	2300      	movs	r3, #0
 800068a:	9303      	str	r3, [sp, #12]
 800068c:	2300      	movs	r3, #0
 800068e:	9302      	str	r3, [sp, #8]
 8000690:	2300      	movs	r3, #0
 8000692:	9301      	str	r3, [sp, #4]
 8000694:	2300      	movs	r3, #0
 8000696:	9300      	str	r3, [sp, #0]
 8000698:	2300      	movs	r3, #0
 800069a:	2200      	movs	r2, #0
 800069c:	2100      	movs	r1, #0
 800069e:	2001      	movs	r0, #1
 80006a0:	f7ff fe1c 	bl	80002dc <display>
	            break;
 80006a4:	e01d      	b.n	80006e2 <display7Segment34+0x18a>
	        case 9:
	            display(LED_7SEG_34, 0, 0, 0, 0, 1, 0, 0);
 80006a6:	2300      	movs	r3, #0
 80006a8:	9303      	str	r3, [sp, #12]
 80006aa:	2300      	movs	r3, #0
 80006ac:	9302      	str	r3, [sp, #8]
 80006ae:	2301      	movs	r3, #1
 80006b0:	9301      	str	r3, [sp, #4]
 80006b2:	2300      	movs	r3, #0
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	2300      	movs	r3, #0
 80006b8:	2200      	movs	r2, #0
 80006ba:	2100      	movs	r1, #0
 80006bc:	2001      	movs	r0, #1
 80006be:	f7ff fe0d 	bl	80002dc <display>
	            break;
 80006c2:	e00e      	b.n	80006e2 <display7Segment34+0x18a>
	        default:
	            display(LED_7SEG_34, 1, 1, 1, 1, 1, 1, 1);
 80006c4:	2301      	movs	r3, #1
 80006c6:	9303      	str	r3, [sp, #12]
 80006c8:	2301      	movs	r3, #1
 80006ca:	9302      	str	r3, [sp, #8]
 80006cc:	2301      	movs	r3, #1
 80006ce:	9301      	str	r3, [sp, #4]
 80006d0:	2301      	movs	r3, #1
 80006d2:	9300      	str	r3, [sp, #0]
 80006d4:	2301      	movs	r3, #1
 80006d6:	2201      	movs	r2, #1
 80006d8:	2101      	movs	r1, #1
 80006da:	2001      	movs	r0, #1
 80006dc:	f7ff fdfe 	bl	80002dc <display>
	        }

}
 80006e0:	bf00      	nop
 80006e2:	bf00      	nop
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop

080006ec <fsm_automatic_run>:
 *      Author: AD
 */

#include "fsm_automatic.h"

void fsm_automatic_run(){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	switch(mode){
 80006f0:	4b5f      	ldr	r3, [pc, #380]	; (8000870 <fsm_automatic_run+0x184>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b04      	cmp	r3, #4
 80006f6:	f200 80b0 	bhi.w	800085a <fsm_automatic_run+0x16e>
 80006fa:	a201      	add	r2, pc, #4	; (adr r2, 8000700 <fsm_automatic_run+0x14>)
 80006fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000700:	08000715 	.word	0x08000715
 8000704:	08000729 	.word	0x08000729
 8000708:	0800076b 	.word	0x0800076b
 800070c:	080007bb 	.word	0x080007bb
 8000710:	0800080b 	.word	0x0800080b
		case INIT:
			setValueLocalNormalMode();
 8000714:	f000 fe1e 	bl	8001354 <setValueLocalNormalMode>
			mode=NORMAL;
 8000718:	4b55      	ldr	r3, [pc, #340]	; (8000870 <fsm_automatic_run+0x184>)
 800071a:	2201      	movs	r2, #1
 800071c:	601a      	str	r2, [r3, #0]
			setTimer3(1000);
 800071e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000722:	f000 ff8d 	bl	8001640 <setTimer3>
			break;
 8000726:	e0a1      	b.n	800086c <fsm_automatic_run+0x180>
		case NORMAL:
			if(timer3_flag==1){
 8000728:	4b52      	ldr	r3, [pc, #328]	; (8000874 <fsm_automatic_run+0x188>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2b01      	cmp	r3, #1
 800072e:	d105      	bne.n	800073c <fsm_automatic_run+0x50>
				normalMode();
 8000730:	f000 fe3a 	bl	80013a8 <normalMode>
				setTimer3(500);
 8000734:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000738:	f000 ff82 	bl	8001640 <setTimer3>
			}
			if(button_flag[0]==1 || button_pressed_1s_flag[0]==1){
 800073c:	4b4e      	ldr	r3, [pc, #312]	; (8000878 <fsm_automatic_run+0x18c>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2b01      	cmp	r3, #1
 8000742:	d004      	beq.n	800074e <fsm_automatic_run+0x62>
 8000744:	4b4d      	ldr	r3, [pc, #308]	; (800087c <fsm_automatic_run+0x190>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2b01      	cmp	r3, #1
 800074a:	f040 8088 	bne.w	800085e <fsm_automatic_run+0x172>
				button_flag[0]=0;
 800074e:	4b4a      	ldr	r3, [pc, #296]	; (8000878 <fsm_automatic_run+0x18c>)
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
				clear_all_traffic_led=0;
 8000754:	4b4a      	ldr	r3, [pc, #296]	; (8000880 <fsm_automatic_run+0x194>)
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
				mode=RED;
 800075a:	4b45      	ldr	r3, [pc, #276]	; (8000870 <fsm_automatic_run+0x184>)
 800075c:	2202      	movs	r2, #2
 800075e:	601a      	str	r2, [r3, #0]
				setTimer3(1000);
 8000760:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000764:	f000 ff6c 	bl	8001640 <setTimer3>
			}
			break;
 8000768:	e079      	b.n	800085e <fsm_automatic_run+0x172>
		case RED :
			redMode();
 800076a:	f000 ff1d 	bl	80015a8 <redMode>
			if(button_flag[0]==1 || button_pressed_1s_flag[0]==1){
 800076e:	4b42      	ldr	r3, [pc, #264]	; (8000878 <fsm_automatic_run+0x18c>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	2b01      	cmp	r3, #1
 8000774:	d003      	beq.n	800077e <fsm_automatic_run+0x92>
 8000776:	4b41      	ldr	r3, [pc, #260]	; (800087c <fsm_automatic_run+0x190>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2b01      	cmp	r3, #1
 800077c:	d10c      	bne.n	8000798 <fsm_automatic_run+0xac>
				button_flag[0]=0;
 800077e:	4b3e      	ldr	r3, [pc, #248]	; (8000878 <fsm_automatic_run+0x18c>)
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
				clear_all_traffic_led=0;
 8000784:	4b3e      	ldr	r3, [pc, #248]	; (8000880 <fsm_automatic_run+0x194>)
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
				mode=GREEN;
 800078a:	4b39      	ldr	r3, [pc, #228]	; (8000870 <fsm_automatic_run+0x184>)
 800078c:	2203      	movs	r2, #3
 800078e:	601a      	str	r2, [r3, #0]
				setTimer3(1000);
 8000790:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000794:	f000 ff54 	bl	8001640 <setTimer3>
			}
			if(button_flag[2]==1 || button_pressed_1s_flag[2]==1){
 8000798:	4b37      	ldr	r3, [pc, #220]	; (8000878 <fsm_automatic_run+0x18c>)
 800079a:	689b      	ldr	r3, [r3, #8]
 800079c:	2b01      	cmp	r3, #1
 800079e:	d003      	beq.n	80007a8 <fsm_automatic_run+0xbc>
 80007a0:	4b36      	ldr	r3, [pc, #216]	; (800087c <fsm_automatic_run+0x190>)
 80007a2:	689b      	ldr	r3, [r3, #8]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d15c      	bne.n	8000862 <fsm_automatic_run+0x176>
				button_flag[2]=0;
 80007a8:	4b33      	ldr	r3, [pc, #204]	; (8000878 <fsm_automatic_run+0x18c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
				setTimeRed();
 80007ae:	f000 fee7 	bl	8001580 <setTimeRed>
				mode=INIT;
 80007b2:	4b2f      	ldr	r3, [pc, #188]	; (8000870 <fsm_automatic_run+0x184>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
			}
			break;
 80007b8:	e053      	b.n	8000862 <fsm_automatic_run+0x176>
		case GREEN:
			greenMode();
 80007ba:	f000 f95f 	bl	8000a7c <greenMode>
			if(button_flag[0]==1 || button_pressed_1s_flag[0]==1){
 80007be:	4b2e      	ldr	r3, [pc, #184]	; (8000878 <fsm_automatic_run+0x18c>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d003      	beq.n	80007ce <fsm_automatic_run+0xe2>
 80007c6:	4b2d      	ldr	r3, [pc, #180]	; (800087c <fsm_automatic_run+0x190>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d10c      	bne.n	80007e8 <fsm_automatic_run+0xfc>
				button_flag[0]=0;
 80007ce:	4b2a      	ldr	r3, [pc, #168]	; (8000878 <fsm_automatic_run+0x18c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
				clear_all_traffic_led=0;
 80007d4:	4b2a      	ldr	r3, [pc, #168]	; (8000880 <fsm_automatic_run+0x194>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
				mode=YELLOW;
 80007da:	4b25      	ldr	r3, [pc, #148]	; (8000870 <fsm_automatic_run+0x184>)
 80007dc:	2204      	movs	r2, #4
 80007de:	601a      	str	r2, [r3, #0]
				setTimer3(1000);
 80007e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007e4:	f000 ff2c 	bl	8001640 <setTimer3>
			}
			if(button_flag[2]==1|| button_pressed_1s_flag[2]==1){
 80007e8:	4b23      	ldr	r3, [pc, #140]	; (8000878 <fsm_automatic_run+0x18c>)
 80007ea:	689b      	ldr	r3, [r3, #8]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d003      	beq.n	80007f8 <fsm_automatic_run+0x10c>
 80007f0:	4b22      	ldr	r3, [pc, #136]	; (800087c <fsm_automatic_run+0x190>)
 80007f2:	689b      	ldr	r3, [r3, #8]
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d136      	bne.n	8000866 <fsm_automatic_run+0x17a>
				button_flag[2]=0;
 80007f8:	4b1f      	ldr	r3, [pc, #124]	; (8000878 <fsm_automatic_run+0x18c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
				setTimeGreen();
 80007fe:	f000 f911 	bl	8000a24 <setTimeGreen>
				mode=INIT;
 8000802:	4b1b      	ldr	r3, [pc, #108]	; (8000870 <fsm_automatic_run+0x184>)
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
			}
			break;
 8000808:	e02d      	b.n	8000866 <fsm_automatic_run+0x17a>
		case YELLOW:
			yellowMode();
 800080a:	f001 f903 	bl	8001a14 <yellowMode>
			if(button_flag[0]==1 || button_pressed_1s_flag[0]==1){
 800080e:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <fsm_automatic_run+0x18c>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	2b01      	cmp	r3, #1
 8000814:	d003      	beq.n	800081e <fsm_automatic_run+0x132>
 8000816:	4b19      	ldr	r3, [pc, #100]	; (800087c <fsm_automatic_run+0x190>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	2b01      	cmp	r3, #1
 800081c:	d10c      	bne.n	8000838 <fsm_automatic_run+0x14c>
				button_flag[0]=0;
 800081e:	4b16      	ldr	r3, [pc, #88]	; (8000878 <fsm_automatic_run+0x18c>)
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
				clear_all_traffic_led=0;
 8000824:	4b16      	ldr	r3, [pc, #88]	; (8000880 <fsm_automatic_run+0x194>)
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
				mode=INIT;
 800082a:	4b11      	ldr	r3, [pc, #68]	; (8000870 <fsm_automatic_run+0x184>)
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
				setTimer3(1000);
 8000830:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000834:	f000 ff04 	bl	8001640 <setTimer3>
			}
			if(button_flag[2]==1|| button_pressed_1s_flag[2]==1){
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <fsm_automatic_run+0x18c>)
 800083a:	689b      	ldr	r3, [r3, #8]
 800083c:	2b01      	cmp	r3, #1
 800083e:	d003      	beq.n	8000848 <fsm_automatic_run+0x15c>
 8000840:	4b0e      	ldr	r3, [pc, #56]	; (800087c <fsm_automatic_run+0x190>)
 8000842:	689b      	ldr	r3, [r3, #8]
 8000844:	2b01      	cmp	r3, #1
 8000846:	d110      	bne.n	800086a <fsm_automatic_run+0x17e>
				button_flag[2]=0;
 8000848:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <fsm_automatic_run+0x18c>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
				setTimeYellow();
 800084e:	f001 f8b5 	bl	80019bc <setTimeYellow>
				mode=INIT;
 8000852:	4b07      	ldr	r3, [pc, #28]	; (8000870 <fsm_automatic_run+0x184>)
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
			}
			break;
 8000858:	e007      	b.n	800086a <fsm_automatic_run+0x17e>
		default:
			break;
 800085a:	bf00      	nop
 800085c:	e006      	b.n	800086c <fsm_automatic_run+0x180>
			break;
 800085e:	bf00      	nop
 8000860:	e004      	b.n	800086c <fsm_automatic_run+0x180>
			break;
 8000862:	bf00      	nop
 8000864:	e002      	b.n	800086c <fsm_automatic_run+0x180>
			break;
 8000866:	bf00      	nop
 8000868:	e000      	b.n	800086c <fsm_automatic_run+0x180>
			break;
 800086a:	bf00      	nop
		}
}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}
 8000870:	2000008c 	.word	0x2000008c
 8000874:	200000c8 	.word	0x200000c8
 8000878:	20000074 	.word	0x20000074
 800087c:	20000080 	.word	0x20000080
 8000880:	20000090 	.word	0x20000090

08000884 <greenBlinking>:
 *
 *  Created on: Nov 14, 2023
 *      Author: AD
 */
#include "green_mode.h"
void greenBlinking(){
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
	//turn off all led
	if(clear_all_traffic_led==0){
 8000888:	4b1d      	ldr	r3, [pc, #116]	; (8000900 <greenBlinking+0x7c>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d126      	bne.n	80008de <greenBlinking+0x5a>
		clear_all_traffic_led=1;
 8000890:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <greenBlinking+0x7c>)
 8000892:	2201      	movs	r2, #1
 8000894:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin,0);
 8000896:	2200      	movs	r2, #0
 8000898:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800089c:	4819      	ldr	r0, [pc, #100]	; (8000904 <greenBlinking+0x80>)
 800089e:	f001 fbf4 	bl	800208a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin,0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008a8:	4816      	ldr	r0, [pc, #88]	; (8000904 <greenBlinking+0x80>)
 80008aa:	f001 fbee 	bl	800208a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin,0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008b4:	4813      	ldr	r0, [pc, #76]	; (8000904 <greenBlinking+0x80>)
 80008b6:	f001 fbe8 	bl	800208a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin,0);
 80008ba:	2200      	movs	r2, #0
 80008bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008c0:	4810      	ldr	r0, [pc, #64]	; (8000904 <greenBlinking+0x80>)
 80008c2:	f001 fbe2 	bl	800208a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin,0);
 80008c6:	2200      	movs	r2, #0
 80008c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008cc:	480d      	ldr	r0, [pc, #52]	; (8000904 <greenBlinking+0x80>)
 80008ce:	f001 fbdc 	bl	800208a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin,0);
 80008d2:	2200      	movs	r2, #0
 80008d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008d8:	480a      	ldr	r0, [pc, #40]	; (8000904 <greenBlinking+0x80>)
 80008da:	f001 fbd6 	bl	800208a <HAL_GPIO_WritePin>
	}
	//blinking led-green
	if(clear_all_traffic_led==1){
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <greenBlinking+0x7c>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d109      	bne.n	80008fa <greenBlinking+0x76>
		HAL_GPIO_TogglePin(GREEN1_GPIO_Port, GREEN1_Pin);
 80008e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008ea:	4806      	ldr	r0, [pc, #24]	; (8000904 <greenBlinking+0x80>)
 80008ec:	f001 fbe5 	bl	80020ba <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GREEN2_GPIO_Port, GREEN2_Pin);
 80008f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008f4:	4803      	ldr	r0, [pc, #12]	; (8000904 <greenBlinking+0x80>)
 80008f6:	f001 fbe0 	bl	80020ba <HAL_GPIO_TogglePin>
	}
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000090 	.word	0x20000090
 8000904:	40010800 	.word	0x40010800

08000908 <displayLed7SegmentGreenMode>:

//turn on or turn off 4 led7segment
int statusLed7SegmentMode3=0;
void displayLed7SegmentGreenMode(){
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
	//turn on led7segment 1 and 3
		if(statusLed7SegmentMode3==0){
 800090c:	4b2e      	ldr	r3, [pc, #184]	; (80009c8 <displayLed7SegmentGreenMode+0xc0>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d123      	bne.n	800095c <displayLed7SegmentGreenMode+0x54>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 8000914:	2200      	movs	r2, #0
 8000916:	2140      	movs	r1, #64	; 0x40
 8000918:	482c      	ldr	r0, [pc, #176]	; (80009cc <displayLed7SegmentGreenMode+0xc4>)
 800091a:	f001 fbb6 	bl	800208a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 800091e:	2201      	movs	r2, #1
 8000920:	2180      	movs	r1, #128	; 0x80
 8000922:	482a      	ldr	r0, [pc, #168]	; (80009cc <displayLed7SegmentGreenMode+0xc4>)
 8000924:	f001 fbb1 	bl	800208a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 8000928:	2200      	movs	r2, #0
 800092a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800092e:	4827      	ldr	r0, [pc, #156]	; (80009cc <displayLed7SegmentGreenMode+0xc4>)
 8000930:	f001 fbab 	bl	800208a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8000934:	2201      	movs	r2, #1
 8000936:	f44f 7100 	mov.w	r1, #512	; 0x200
 800093a:	4824      	ldr	r0, [pc, #144]	; (80009cc <displayLed7SegmentGreenMode+0xc4>)
 800093c:	f001 fba5 	bl	800208a <HAL_GPIO_WritePin>
			display7Segment12(time_green/10);
 8000940:	4b23      	ldr	r3, [pc, #140]	; (80009d0 <displayLed7SegmentGreenMode+0xc8>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a23      	ldr	r2, [pc, #140]	; (80009d4 <displayLed7SegmentGreenMode+0xcc>)
 8000946:	fb82 1203 	smull	r1, r2, r2, r3
 800094a:	1092      	asrs	r2, r2, #2
 800094c:	17db      	asrs	r3, r3, #31
 800094e:	1ad3      	subs	r3, r2, r3
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff fd37 	bl	80003c4 <display7Segment12>
			display7Segment34(0);
 8000956:	2000      	movs	r0, #0
 8000958:	f7ff fdfe 	bl	8000558 <display7Segment34>
		}
		//turn on led7segment 2 and 4
		if(statusLed7SegmentMode3==1){
 800095c:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <displayLed7SegmentGreenMode+0xc0>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d128      	bne.n	80009b6 <displayLed7SegmentGreenMode+0xae>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 8000964:	2201      	movs	r2, #1
 8000966:	2140      	movs	r1, #64	; 0x40
 8000968:	4818      	ldr	r0, [pc, #96]	; (80009cc <displayLed7SegmentGreenMode+0xc4>)
 800096a:	f001 fb8e 	bl	800208a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	2180      	movs	r1, #128	; 0x80
 8000972:	4816      	ldr	r0, [pc, #88]	; (80009cc <displayLed7SegmentGreenMode+0xc4>)
 8000974:	f001 fb89 	bl	800208a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000978:	2201      	movs	r2, #1
 800097a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800097e:	4813      	ldr	r0, [pc, #76]	; (80009cc <displayLed7SegmentGreenMode+0xc4>)
 8000980:	f001 fb83 	bl	800208a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 8000984:	2200      	movs	r2, #0
 8000986:	f44f 7100 	mov.w	r1, #512	; 0x200
 800098a:	4810      	ldr	r0, [pc, #64]	; (80009cc <displayLed7SegmentGreenMode+0xc4>)
 800098c:	f001 fb7d 	bl	800208a <HAL_GPIO_WritePin>
			display7Segment12(time_green-10*(time_green/10));
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <displayLed7SegmentGreenMode+0xc8>)
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <displayLed7SegmentGreenMode+0xcc>)
 8000996:	fb83 1302 	smull	r1, r3, r3, r2
 800099a:	1099      	asrs	r1, r3, #2
 800099c:	17d3      	asrs	r3, r2, #31
 800099e:	1ac9      	subs	r1, r1, r3
 80009a0:	460b      	mov	r3, r1
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	440b      	add	r3, r1
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	1ad1      	subs	r1, r2, r3
 80009aa:	4608      	mov	r0, r1
 80009ac:	f7ff fd0a 	bl	80003c4 <display7Segment12>
			display7Segment34(3);
 80009b0:	2003      	movs	r0, #3
 80009b2:	f7ff fdd1 	bl	8000558 <display7Segment34>
		}
		statusLed7SegmentMode3=1-statusLed7SegmentMode3;
 80009b6:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <displayLed7SegmentGreenMode+0xc0>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f1c3 0301 	rsb	r3, r3, #1
 80009be:	4a02      	ldr	r2, [pc, #8]	; (80009c8 <displayLed7SegmentGreenMode+0xc0>)
 80009c0:	6013      	str	r3, [r2, #0]
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000094 	.word	0x20000094
 80009cc:	40010800 	.word	0x40010800
 80009d0:	20000040 	.word	0x20000040
 80009d4:	66666667 	.word	0x66666667

080009d8 <addTimeGreen>:

//increase the timer of led-green when press button 2(button_flag[1]=1)
void addTimeGreen(){
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
	if(button_flag[1]==1 || button_pressed_1s_flag[1]==1){
 80009dc:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <addTimeGreen+0x40>)
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d003      	beq.n	80009ec <addTimeGreen+0x14>
 80009e4:	4b0d      	ldr	r3, [pc, #52]	; (8000a1c <addTimeGreen+0x44>)
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d111      	bne.n	8000a10 <addTimeGreen+0x38>
		button_flag[1]=0;
 80009ec:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <addTimeGreen+0x40>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	605a      	str	r2, [r3, #4]
		button_pressed_1s_flag[1]=0;
 80009f2:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <addTimeGreen+0x44>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	605a      	str	r2, [r3, #4]
		time_green++;
 80009f8:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <addTimeGreen+0x48>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	3301      	adds	r3, #1
 80009fe:	4a08      	ldr	r2, [pc, #32]	; (8000a20 <addTimeGreen+0x48>)
 8000a00:	6013      	str	r3, [r2, #0]
		if(time_green>99) time_green=1;
 8000a02:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <addTimeGreen+0x48>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2b63      	cmp	r3, #99	; 0x63
 8000a08:	dd02      	ble.n	8000a10 <addTimeGreen+0x38>
 8000a0a:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <addTimeGreen+0x48>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	601a      	str	r2, [r3, #0]
	}
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr
 8000a18:	20000074 	.word	0x20000074
 8000a1c:	20000080 	.word	0x20000080
 8000a20:	20000040 	.word	0x20000040

08000a24 <setTimeGreen>:

void setTimeGreen(){
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
		if(time_green+time_yellow>99) {
 8000a28:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <setTimeGreen+0x4c>)
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <setTimeGreen+0x50>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4413      	add	r3, r2
 8000a32:	2b63      	cmp	r3, #99	; 0x63
 8000a34:	dd09      	ble.n	8000a4a <setTimeGreen+0x26>
			time_red=99;
 8000a36:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <setTimeGreen+0x54>)
 8000a38:	2263      	movs	r2, #99	; 0x63
 8000a3a:	601a      	str	r2, [r3, #0]
			time_yellow=time_red-time_green;
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <setTimeGreen+0x54>)
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <setTimeGreen+0x4c>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	4a0b      	ldr	r2, [pc, #44]	; (8000a74 <setTimeGreen+0x50>)
 8000a48:	6013      	str	r3, [r2, #0]
		}
		if(time_green+time_yellow<=99) {
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <setTimeGreen+0x4c>)
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <setTimeGreen+0x50>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4413      	add	r3, r2
 8000a54:	2b63      	cmp	r3, #99	; 0x63
 8000a56:	dc06      	bgt.n	8000a66 <setTimeGreen+0x42>
			time_red=time_green+time_yellow;
 8000a58:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <setTimeGreen+0x4c>)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <setTimeGreen+0x50>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4413      	add	r3, r2
 8000a62:	4a05      	ldr	r2, [pc, #20]	; (8000a78 <setTimeGreen+0x54>)
 8000a64:	6013      	str	r3, [r2, #0]
	    }
}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bc80      	pop	{r7}
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	20000040 	.word	0x20000040
 8000a74:	20000044 	.word	0x20000044
 8000a78:	2000003c 	.word	0x2000003c

08000a7c <greenMode>:

void greenMode(){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
	addTimeGreen();
 8000a80:	f7ff ffaa 	bl	80009d8 <addTimeGreen>
	if(timer1_flag==1){
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <greenMode+0x24>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d107      	bne.n	8000a9c <greenMode+0x20>
		setTimer1(500);
 8000a8c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a90:	f000 fd9e 	bl	80015d0 <setTimer1>
		greenBlinking();
 8000a94:	f7ff fef6 	bl	8000884 <greenBlinking>
		displayLed7SegmentGreenMode();
 8000a98:	f7ff ff36 	bl	8000908 <displayLed7SegmentGreenMode>
	}

}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	200000b8 	.word	0x200000b8

08000aa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aa8:	f000 ffee 	bl	8001a88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aac:	f000 f818 	bl	8000ae0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ab0:	f000 f89e 	bl	8000bf0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000ab4:	f000 f850 	bl	8000b58 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 8000ab8:	4807      	ldr	r0, [pc, #28]	; (8000ad8 <main+0x34>)
 8000aba:	f001 ff43 	bl	8002944 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  mode=INIT;
 8000abe:	4b07      	ldr	r3, [pc, #28]	; (8000adc <main+0x38>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
  setTimer1(10);
 8000ac4:	200a      	movs	r0, #10
 8000ac6:	f000 fd83 	bl	80015d0 <setTimer1>
  setTimer2(10);
 8000aca:	200a      	movs	r0, #10
 8000acc:	f000 fd9c 	bl	8001608 <setTimer2>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  fsm_automatic_run();
 8000ad0:	f7ff fe0c 	bl	80006ec <fsm_automatic_run>
 8000ad4:	e7fc      	b.n	8000ad0 <main+0x2c>
 8000ad6:	bf00      	nop
 8000ad8:	200000d0 	.word	0x200000d0
 8000adc:	2000008c 	.word	0x2000008c

08000ae0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b090      	sub	sp, #64	; 0x40
 8000ae4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ae6:	f107 0318 	add.w	r3, r7, #24
 8000aea:	2228      	movs	r2, #40	; 0x28
 8000aec:	2100      	movs	r1, #0
 8000aee:	4618      	mov	r0, r3
 8000af0:	f002 fae4 	bl	80030bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af4:	1d3b      	adds	r3, r7, #4
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
 8000b00:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b02:	2302      	movs	r3, #2
 8000b04:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b06:	2301      	movs	r3, #1
 8000b08:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b0a:	2310      	movs	r3, #16
 8000b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b12:	f107 0318 	add.w	r3, r7, #24
 8000b16:	4618      	mov	r0, r3
 8000b18:	f001 fae8 	bl	80020ec <HAL_RCC_OscConfig>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000b22:	f000 f8ef 	bl	8000d04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b26:	230f      	movs	r3, #15
 8000b28:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b36:	2300      	movs	r3, #0
 8000b38:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f001 fd54 	bl	80025ec <HAL_RCC_ClockConfig>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000b4a:	f000 f8db 	bl	8000d04 <Error_Handler>
  }
}
 8000b4e:	bf00      	nop
 8000b50:	3740      	adds	r7, #64	; 0x40
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
	...

08000b58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b5e:	f107 0308 	add.w	r3, r7, #8
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b6c:	463b      	mov	r3, r7
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b74:	4b1d      	ldr	r3, [pc, #116]	; (8000bec <MX_TIM2_Init+0x94>)
 8000b76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b7a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000b7c:	4b1b      	ldr	r3, [pc, #108]	; (8000bec <MX_TIM2_Init+0x94>)
 8000b7e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000b82:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b84:	4b19      	ldr	r3, [pc, #100]	; (8000bec <MX_TIM2_Init+0x94>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000b8a:	4b18      	ldr	r3, [pc, #96]	; (8000bec <MX_TIM2_Init+0x94>)
 8000b8c:	2209      	movs	r2, #9
 8000b8e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b90:	4b16      	ldr	r3, [pc, #88]	; (8000bec <MX_TIM2_Init+0x94>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b96:	4b15      	ldr	r3, [pc, #84]	; (8000bec <MX_TIM2_Init+0x94>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b9c:	4813      	ldr	r0, [pc, #76]	; (8000bec <MX_TIM2_Init+0x94>)
 8000b9e:	f001 fe81 	bl	80028a4 <HAL_TIM_Base_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ba8:	f000 f8ac 	bl	8000d04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bb0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bb2:	f107 0308 	add.w	r3, r7, #8
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	480c      	ldr	r0, [pc, #48]	; (8000bec <MX_TIM2_Init+0x94>)
 8000bba:	f002 f817 	bl	8002bec <HAL_TIM_ConfigClockSource>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000bc4:	f000 f89e 	bl	8000d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bd0:	463b      	mov	r3, r7
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4805      	ldr	r0, [pc, #20]	; (8000bec <MX_TIM2_Init+0x94>)
 8000bd6:	f002 f9e3 	bl	8002fa0 <HAL_TIMEx_MasterConfigSynchronization>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000be0:	f000 f890 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000be4:	bf00      	nop
 8000be6:	3718      	adds	r7, #24
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	200000d0 	.word	0x200000d0

08000bf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b088      	sub	sp, #32
 8000bf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf6:	f107 0310 	add.w	r3, r7, #16
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c04:	4b35      	ldr	r3, [pc, #212]	; (8000cdc <MX_GPIO_Init+0xec>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	4a34      	ldr	r2, [pc, #208]	; (8000cdc <MX_GPIO_Init+0xec>)
 8000c0a:	f043 0310 	orr.w	r3, r3, #16
 8000c0e:	6193      	str	r3, [r2, #24]
 8000c10:	4b32      	ldr	r3, [pc, #200]	; (8000cdc <MX_GPIO_Init+0xec>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	f003 0310 	and.w	r3, r3, #16
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1c:	4b2f      	ldr	r3, [pc, #188]	; (8000cdc <MX_GPIO_Init+0xec>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	4a2e      	ldr	r2, [pc, #184]	; (8000cdc <MX_GPIO_Init+0xec>)
 8000c22:	f043 0304 	orr.w	r3, r3, #4
 8000c26:	6193      	str	r3, [r2, #24]
 8000c28:	4b2c      	ldr	r3, [pc, #176]	; (8000cdc <MX_GPIO_Init+0xec>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	f003 0304 	and.w	r3, r3, #4
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c34:	4b29      	ldr	r3, [pc, #164]	; (8000cdc <MX_GPIO_Init+0xec>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	4a28      	ldr	r2, [pc, #160]	; (8000cdc <MX_GPIO_Init+0xec>)
 8000c3a:	f043 0308 	orr.w	r3, r3, #8
 8000c3e:	6193      	str	r3, [r2, #24]
 8000c40:	4b26      	ldr	r3, [pc, #152]	; (8000cdc <MX_GPIO_Init+0xec>)
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	f003 0308 	and.w	r3, r3, #8
 8000c48:	607b      	str	r3, [r7, #4]
 8000c4a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|EN0_Pin
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f64f 71c7 	movw	r1, #65479	; 0xffc7
 8000c52:	4823      	ldr	r0, [pc, #140]	; (8000ce0 <MX_GPIO_Init+0xf0>)
 8000c54:	f001 fa19 	bl	800208a <HAL_GPIO_WritePin>
                          |EN1_Pin|EN2_Pin|EN3_Pin|RED1_Pin
                          |YELLOW1_Pin|GREEN1_Pin|RED2_Pin|YELLOW2_Pin
                          |GREEN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8000c5e:	4821      	ldr	r0, [pc, #132]	; (8000ce4 <MX_GPIO_Init+0xf4>)
 8000c60:	f001 fa13 	bl	800208a <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : BUTTON_1_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin;
 8000c64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_1_GPIO_Port, &GPIO_InitStruct);
 8000c72:	f107 0310 	add.w	r3, r7, #16
 8000c76:	4619      	mov	r1, r3
 8000c78:	481b      	ldr	r0, [pc, #108]	; (8000ce8 <MX_GPIO_Init+0xf8>)
 8000c7a:	f001 f875 	bl	8001d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 EN0_Pin
                           EN1_Pin EN2_Pin EN3_Pin RED1_Pin
                           YELLOW1_Pin GREEN1_Pin RED2_Pin YELLOW2_Pin
                           GREEN2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|EN0_Pin
 8000c7e:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 8000c82:	613b      	str	r3, [r7, #16]
                          |EN1_Pin|EN2_Pin|EN3_Pin|RED1_Pin
                          |YELLOW1_Pin|GREEN1_Pin|RED2_Pin|YELLOW2_Pin
                          |GREEN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c84:	2301      	movs	r3, #1
 8000c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c90:	f107 0310 	add.w	r3, r7, #16
 8000c94:	4619      	mov	r1, r3
 8000c96:	4812      	ldr	r0, [pc, #72]	; (8000ce0 <MX_GPIO_Init+0xf0>)
 8000c98:	f001 f866 	bl	8001d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : SELECT_Pin MODIFY_Pin SET_Pin */
  GPIO_InitStruct.Pin = SELECT_Pin|MODIFY_Pin|SET_Pin;
 8000c9c:	2338      	movs	r3, #56	; 0x38
 8000c9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca8:	f107 0310 	add.w	r3, r7, #16
 8000cac:	4619      	mov	r1, r3
 8000cae:	480c      	ldr	r0, [pc, #48]	; (8000ce0 <MX_GPIO_Init+0xf0>)
 8000cb0:	f001 f85a 	bl	8001d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB3
                           PB4 PB5 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000cb4:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000cb8:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc6:	f107 0310 	add.w	r3, r7, #16
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <MX_GPIO_Init+0xf4>)
 8000cce:	f001 f84b 	bl	8001d68 <HAL_GPIO_Init>

}
 8000cd2:	bf00      	nop
 8000cd4:	3720      	adds	r7, #32
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	40010800 	.word	0x40010800
 8000ce4:	40010c00 	.word	0x40010c00
 8000ce8:	40011000 	.word	0x40011000

08000cec <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
	getKeyInput();
 8000cf4:	f7ff fa3a 	bl	800016c <getKeyInput>
	timerRun();
 8000cf8:	f000 fcbe 	bl	8001678 <timerRun>
}
 8000cfc:	bf00      	nop
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d08:	b672      	cpsid	i
}
 8000d0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <Error_Handler+0x8>
	...

08000d10 <traffic_light>:
//turn on or turn off 4 led7segment
int status_led7segment=0;
//count the time of led_green or led_yellow
int counter_second1=0;

void traffic_light(){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
	if(state_led == 0){
 8000d14:	4b6b      	ldr	r3, [pc, #428]	; (8000ec4 <traffic_light+0x1b4>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d165      	bne.n	8000de8 <traffic_light+0xd8>
		counter_second++;
 8000d1c:	4b6a      	ldr	r3, [pc, #424]	; (8000ec8 <traffic_light+0x1b8>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	3301      	adds	r3, #1
 8000d22:	4a69      	ldr	r2, [pc, #420]	; (8000ec8 <traffic_light+0x1b8>)
 8000d24:	6013      	str	r3, [r2, #0]
		if(counter_second < time_green){
 8000d26:	4b68      	ldr	r3, [pc, #416]	; (8000ec8 <traffic_light+0x1b8>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	4b68      	ldr	r3, [pc, #416]	; (8000ecc <traffic_light+0x1bc>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	da23      	bge.n	8000d7a <traffic_light+0x6a>
			  //trang thai 1: led_red_1,led_green_2: bat
			  //			led_yellow_1,led_green_1,led_red_2,led_yellow_2:tat
			  HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin,1);
 8000d32:	2201      	movs	r2, #1
 8000d34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d38:	4865      	ldr	r0, [pc, #404]	; (8000ed0 <traffic_light+0x1c0>)
 8000d3a:	f001 f9a6 	bl	800208a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin,0);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d44:	4862      	ldr	r0, [pc, #392]	; (8000ed0 <traffic_light+0x1c0>)
 8000d46:	f001 f9a0 	bl	800208a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin,0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d50:	485f      	ldr	r0, [pc, #380]	; (8000ed0 <traffic_light+0x1c0>)
 8000d52:	f001 f99a 	bl	800208a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin,0);
 8000d56:	2200      	movs	r2, #0
 8000d58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d5c:	485c      	ldr	r0, [pc, #368]	; (8000ed0 <traffic_light+0x1c0>)
 8000d5e:	f001 f994 	bl	800208a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin,1);
 8000d62:	2201      	movs	r2, #1
 8000d64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d68:	4859      	ldr	r0, [pc, #356]	; (8000ed0 <traffic_light+0x1c0>)
 8000d6a:	f001 f98e 	bl	800208a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin,0);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d74:	4856      	ldr	r0, [pc, #344]	; (8000ed0 <traffic_light+0x1c0>)
 8000d76:	f001 f988 	bl	800208a <HAL_GPIO_WritePin>
		}
		if(counter_second >= time_green){
 8000d7a:	4b53      	ldr	r3, [pc, #332]	; (8000ec8 <traffic_light+0x1b8>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	4b53      	ldr	r3, [pc, #332]	; (8000ecc <traffic_light+0x1bc>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	db23      	blt.n	8000dce <traffic_light+0xbe>
			  //trang thai 2: led_red_1,led_yellow_2: bat
			  //			led_yellow_1,led_green_1,led_red_2,led_green_2:tat
			  HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin,1);
 8000d86:	2201      	movs	r2, #1
 8000d88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d8c:	4850      	ldr	r0, [pc, #320]	; (8000ed0 <traffic_light+0x1c0>)
 8000d8e:	f001 f97c 	bl	800208a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin,0);
 8000d92:	2200      	movs	r2, #0
 8000d94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d98:	484d      	ldr	r0, [pc, #308]	; (8000ed0 <traffic_light+0x1c0>)
 8000d9a:	f001 f976 	bl	800208a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin,0);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000da4:	484a      	ldr	r0, [pc, #296]	; (8000ed0 <traffic_light+0x1c0>)
 8000da6:	f001 f970 	bl	800208a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin,0);
 8000daa:	2200      	movs	r2, #0
 8000dac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000db0:	4847      	ldr	r0, [pc, #284]	; (8000ed0 <traffic_light+0x1c0>)
 8000db2:	f001 f96a 	bl	800208a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin,0);
 8000db6:	2200      	movs	r2, #0
 8000db8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dbc:	4844      	ldr	r0, [pc, #272]	; (8000ed0 <traffic_light+0x1c0>)
 8000dbe:	f001 f964 	bl	800208a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin,1);
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dc8:	4841      	ldr	r0, [pc, #260]	; (8000ed0 <traffic_light+0x1c0>)
 8000dca:	f001 f95e 	bl	800208a <HAL_GPIO_WritePin>
		}
		if(counter_second == time_red){
 8000dce:	4b3e      	ldr	r3, [pc, #248]	; (8000ec8 <traffic_light+0x1b8>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	4b40      	ldr	r3, [pc, #256]	; (8000ed4 <traffic_light+0x1c4>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d106      	bne.n	8000de8 <traffic_light+0xd8>
			  // set lai gia tri cua state_led va counter_second
			  state_led=1;
 8000dda:	4b3a      	ldr	r3, [pc, #232]	; (8000ec4 <traffic_light+0x1b4>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	601a      	str	r2, [r3, #0]
			  counter_second=-1;
 8000de0:	4b39      	ldr	r3, [pc, #228]	; (8000ec8 <traffic_light+0x1b8>)
 8000de2:	f04f 32ff 	mov.w	r2, #4294967295
 8000de6:	601a      	str	r2, [r3, #0]
		}
	}
	  if(state_led==1){
 8000de8:	4b36      	ldr	r3, [pc, #216]	; (8000ec4 <traffic_light+0x1b4>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d166      	bne.n	8000ebe <traffic_light+0x1ae>
		  counter_second++;
 8000df0:	4b35      	ldr	r3, [pc, #212]	; (8000ec8 <traffic_light+0x1b8>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	3301      	adds	r3, #1
 8000df6:	4a34      	ldr	r2, [pc, #208]	; (8000ec8 <traffic_light+0x1b8>)
 8000df8:	6013      	str	r3, [r2, #0]
		  if(counter_second<time_green){
 8000dfa:	4b33      	ldr	r3, [pc, #204]	; (8000ec8 <traffic_light+0x1b8>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	4b33      	ldr	r3, [pc, #204]	; (8000ecc <traffic_light+0x1bc>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	da23      	bge.n	8000e4e <traffic_light+0x13e>
			  //trang thai 1: led_red_2,led_green_1: bat
			  //			led_yellow_1,led_green_2,led_red_1,led_yellow_2:tat
			  HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin,0);
 8000e06:	2200      	movs	r2, #0
 8000e08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e0c:	4830      	ldr	r0, [pc, #192]	; (8000ed0 <traffic_light+0x1c0>)
 8000e0e:	f001 f93c 	bl	800208a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin,0);
 8000e12:	2200      	movs	r2, #0
 8000e14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e18:	482d      	ldr	r0, [pc, #180]	; (8000ed0 <traffic_light+0x1c0>)
 8000e1a:	f001 f936 	bl	800208a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin,1);
 8000e1e:	2201      	movs	r2, #1
 8000e20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e24:	482a      	ldr	r0, [pc, #168]	; (8000ed0 <traffic_light+0x1c0>)
 8000e26:	f001 f930 	bl	800208a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin,1);
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e30:	4827      	ldr	r0, [pc, #156]	; (8000ed0 <traffic_light+0x1c0>)
 8000e32:	f001 f92a 	bl	800208a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin,0);
 8000e36:	2200      	movs	r2, #0
 8000e38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e3c:	4824      	ldr	r0, [pc, #144]	; (8000ed0 <traffic_light+0x1c0>)
 8000e3e:	f001 f924 	bl	800208a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin,0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e48:	4821      	ldr	r0, [pc, #132]	; (8000ed0 <traffic_light+0x1c0>)
 8000e4a:	f001 f91e 	bl	800208a <HAL_GPIO_WritePin>
		  }
		  if(counter_second>=time_green){
 8000e4e:	4b1e      	ldr	r3, [pc, #120]	; (8000ec8 <traffic_light+0x1b8>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	4b1e      	ldr	r3, [pc, #120]	; (8000ecc <traffic_light+0x1bc>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	429a      	cmp	r2, r3
 8000e58:	db23      	blt.n	8000ea2 <traffic_light+0x192>
			  //trang thai 2: led_red_2,led_yellow_1: bat
			  //			led_yellow_2,led_green_1,led_red_1,led_green_2:tat
			  HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin,0);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e60:	481b      	ldr	r0, [pc, #108]	; (8000ed0 <traffic_light+0x1c0>)
 8000e62:	f001 f912 	bl	800208a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin,1);
 8000e66:	2201      	movs	r2, #1
 8000e68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e6c:	4818      	ldr	r0, [pc, #96]	; (8000ed0 <traffic_light+0x1c0>)
 8000e6e:	f001 f90c 	bl	800208a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin,0);
 8000e72:	2200      	movs	r2, #0
 8000e74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e78:	4815      	ldr	r0, [pc, #84]	; (8000ed0 <traffic_light+0x1c0>)
 8000e7a:	f001 f906 	bl	800208a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin,1);
 8000e7e:	2201      	movs	r2, #1
 8000e80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e84:	4812      	ldr	r0, [pc, #72]	; (8000ed0 <traffic_light+0x1c0>)
 8000e86:	f001 f900 	bl	800208a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin,0);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e90:	480f      	ldr	r0, [pc, #60]	; (8000ed0 <traffic_light+0x1c0>)
 8000e92:	f001 f8fa 	bl	800208a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin,0);
 8000e96:	2200      	movs	r2, #0
 8000e98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e9c:	480c      	ldr	r0, [pc, #48]	; (8000ed0 <traffic_light+0x1c0>)
 8000e9e:	f001 f8f4 	bl	800208a <HAL_GPIO_WritePin>
		  }
		  if(counter_second==time_red-1){
 8000ea2:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <traffic_light+0x1c4>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	1e5a      	subs	r2, r3, #1
 8000ea8:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <traffic_light+0x1b8>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d106      	bne.n	8000ebe <traffic_light+0x1ae>
			  //set lại gia tri cua state_led va counter_second
			  state_led=0;
 8000eb0:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <traffic_light+0x1b4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
			  counter_second=-1;
 8000eb6:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <traffic_light+0x1b8>)
 8000eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ebc:	601a      	str	r2, [r3, #0]
		  }
	  }
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000098 	.word	0x20000098
 8000ec8:	20000048 	.word	0x20000048
 8000ecc:	20000040 	.word	0x20000040
 8000ed0:	40010800 	.word	0x40010800
 8000ed4:	2000003c 	.word	0x2000003c

08000ed8 <displayFour7Segemnt>:

void displayFour7Segemnt(){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
	//display led7segment 1 and 3
	if(state_led==0&&status_led7segment==0){
 8000edc:	4bab      	ldr	r3, [pc, #684]	; (800118c <displayFour7Segemnt+0x2b4>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d14f      	bne.n	8000f84 <displayFour7Segemnt+0xac>
 8000ee4:	4baa      	ldr	r3, [pc, #680]	; (8001190 <displayFour7Segemnt+0x2b8>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d14b      	bne.n	8000f84 <displayFour7Segemnt+0xac>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 8000eec:	2200      	movs	r2, #0
 8000eee:	2140      	movs	r1, #64	; 0x40
 8000ef0:	48a8      	ldr	r0, [pc, #672]	; (8001194 <displayFour7Segemnt+0x2bc>)
 8000ef2:	f001 f8ca 	bl	800208a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	2180      	movs	r1, #128	; 0x80
 8000efa:	48a6      	ldr	r0, [pc, #664]	; (8001194 <displayFour7Segemnt+0x2bc>)
 8000efc:	f001 f8c5 	bl	800208a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 8000f00:	2200      	movs	r2, #0
 8000f02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f06:	48a3      	ldr	r0, [pc, #652]	; (8001194 <displayFour7Segemnt+0x2bc>)
 8000f08:	f001 f8bf 	bl	800208a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f12:	48a0      	ldr	r0, [pc, #640]	; (8001194 <displayFour7Segemnt+0x2bc>)
 8000f14:	f001 f8b9 	bl	800208a <HAL_GPIO_WritePin>
		display7Segment12((time_red-counter_red)/10);
 8000f18:	4b9f      	ldr	r3, [pc, #636]	; (8001198 <displayFour7Segemnt+0x2c0>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	4b9f      	ldr	r3, [pc, #636]	; (800119c <displayFour7Segemnt+0x2c4>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	4a9f      	ldr	r2, [pc, #636]	; (80011a0 <displayFour7Segemnt+0x2c8>)
 8000f24:	fb82 1203 	smull	r1, r2, r2, r3
 8000f28:	1092      	asrs	r2, r2, #2
 8000f2a:	17db      	asrs	r3, r3, #31
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff fa48 	bl	80003c4 <display7Segment12>
		if(counter_second1<time_green) display7Segment34((time_green-counter_green)/10);
 8000f34:	4b9b      	ldr	r3, [pc, #620]	; (80011a4 <displayFour7Segemnt+0x2cc>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4b9b      	ldr	r3, [pc, #620]	; (80011a8 <displayFour7Segemnt+0x2d0>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	da0d      	bge.n	8000f5c <displayFour7Segemnt+0x84>
 8000f40:	4b99      	ldr	r3, [pc, #612]	; (80011a8 <displayFour7Segemnt+0x2d0>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b99      	ldr	r3, [pc, #612]	; (80011ac <displayFour7Segemnt+0x2d4>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	4a95      	ldr	r2, [pc, #596]	; (80011a0 <displayFour7Segemnt+0x2c8>)
 8000f4c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f50:	1092      	asrs	r2, r2, #2
 8000f52:	17db      	asrs	r3, r3, #31
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fafe 	bl	8000558 <display7Segment34>
		if(counter_second1>=time_green) display7Segment34((time_yellow-counter_yellow)/10);
 8000f5c:	4b91      	ldr	r3, [pc, #580]	; (80011a4 <displayFour7Segemnt+0x2cc>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	4b91      	ldr	r3, [pc, #580]	; (80011a8 <displayFour7Segemnt+0x2d0>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	db0d      	blt.n	8000f84 <displayFour7Segemnt+0xac>
 8000f68:	4b91      	ldr	r3, [pc, #580]	; (80011b0 <displayFour7Segemnt+0x2d8>)
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	4b91      	ldr	r3, [pc, #580]	; (80011b4 <displayFour7Segemnt+0x2dc>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	4a8b      	ldr	r2, [pc, #556]	; (80011a0 <displayFour7Segemnt+0x2c8>)
 8000f74:	fb82 1203 	smull	r1, r2, r2, r3
 8000f78:	1092      	asrs	r2, r2, #2
 8000f7a:	17db      	asrs	r3, r3, #31
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff faea 	bl	8000558 <display7Segment34>
	}
	//display led7segment 2 and 4
	if(state_led==0&&status_led7segment==1){
 8000f84:	4b81      	ldr	r3, [pc, #516]	; (800118c <displayFour7Segemnt+0x2b4>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	f040 80aa 	bne.w	80010e2 <displayFour7Segemnt+0x20a>
 8000f8e:	4b80      	ldr	r3, [pc, #512]	; (8001190 <displayFour7Segemnt+0x2b8>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	f040 80a5 	bne.w	80010e2 <displayFour7Segemnt+0x20a>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	2140      	movs	r1, #64	; 0x40
 8000f9c:	487d      	ldr	r0, [pc, #500]	; (8001194 <displayFour7Segemnt+0x2bc>)
 8000f9e:	f001 f874 	bl	800208a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2180      	movs	r1, #128	; 0x80
 8000fa6:	487b      	ldr	r0, [pc, #492]	; (8001194 <displayFour7Segemnt+0x2bc>)
 8000fa8:	f001 f86f 	bl	800208a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000fac:	2201      	movs	r2, #1
 8000fae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fb2:	4878      	ldr	r0, [pc, #480]	; (8001194 <displayFour7Segemnt+0x2bc>)
 8000fb4:	f001 f869 	bl	800208a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fbe:	4875      	ldr	r0, [pc, #468]	; (8001194 <displayFour7Segemnt+0x2bc>)
 8000fc0:	f001 f863 	bl	800208a <HAL_GPIO_WritePin>
		display7Segment12(time_red-counter_red-((time_red-counter_red)/10)*10);
 8000fc4:	4b74      	ldr	r3, [pc, #464]	; (8001198 <displayFour7Segemnt+0x2c0>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b74      	ldr	r3, [pc, #464]	; (800119c <displayFour7Segemnt+0x2c4>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	1ad2      	subs	r2, r2, r3
 8000fce:	4b74      	ldr	r3, [pc, #464]	; (80011a0 <displayFour7Segemnt+0x2c8>)
 8000fd0:	fb83 1302 	smull	r1, r3, r3, r2
 8000fd4:	1099      	asrs	r1, r3, #2
 8000fd6:	17d3      	asrs	r3, r2, #31
 8000fd8:	1ac9      	subs	r1, r1, r3
 8000fda:	460b      	mov	r3, r1
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	440b      	add	r3, r1
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	1ad1      	subs	r1, r2, r3
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	f7ff f9ed 	bl	80003c4 <display7Segment12>
		if(counter_second1<time_green) {
 8000fea:	4b6e      	ldr	r3, [pc, #440]	; (80011a4 <displayFour7Segemnt+0x2cc>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	4b6e      	ldr	r3, [pc, #440]	; (80011a8 <displayFour7Segemnt+0x2d0>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	da26      	bge.n	8001044 <displayFour7Segemnt+0x16c>
			display7Segment34(time_green-counter_green-((time_green-counter_green)/10)*10);
 8000ff6:	4b6c      	ldr	r3, [pc, #432]	; (80011a8 <displayFour7Segemnt+0x2d0>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	4b6c      	ldr	r3, [pc, #432]	; (80011ac <displayFour7Segemnt+0x2d4>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	1ad2      	subs	r2, r2, r3
 8001000:	4b67      	ldr	r3, [pc, #412]	; (80011a0 <displayFour7Segemnt+0x2c8>)
 8001002:	fb83 1302 	smull	r1, r3, r3, r2
 8001006:	1099      	asrs	r1, r3, #2
 8001008:	17d3      	asrs	r3, r2, #31
 800100a:	1ac9      	subs	r1, r1, r3
 800100c:	460b      	mov	r3, r1
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	440b      	add	r3, r1
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	1ad1      	subs	r1, r2, r3
 8001016:	4608      	mov	r0, r1
 8001018:	f7ff fa9e 	bl	8000558 <display7Segment34>
			if(counter_green<time_green){
 800101c:	4b63      	ldr	r3, [pc, #396]	; (80011ac <displayFour7Segemnt+0x2d4>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4b61      	ldr	r3, [pc, #388]	; (80011a8 <displayFour7Segemnt+0x2d0>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	429a      	cmp	r2, r3
 8001026:	da0d      	bge.n	8001044 <displayFour7Segemnt+0x16c>
					counter_green++;
 8001028:	4b60      	ldr	r3, [pc, #384]	; (80011ac <displayFour7Segemnt+0x2d4>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	3301      	adds	r3, #1
 800102e:	4a5f      	ldr	r2, [pc, #380]	; (80011ac <displayFour7Segemnt+0x2d4>)
 8001030:	6013      	str	r3, [r2, #0]
					if(counter_green>=time_green) counter_green=0;
 8001032:	4b5e      	ldr	r3, [pc, #376]	; (80011ac <displayFour7Segemnt+0x2d4>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	4b5c      	ldr	r3, [pc, #368]	; (80011a8 <displayFour7Segemnt+0x2d0>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	429a      	cmp	r2, r3
 800103c:	db02      	blt.n	8001044 <displayFour7Segemnt+0x16c>
 800103e:	4b5b      	ldr	r3, [pc, #364]	; (80011ac <displayFour7Segemnt+0x2d4>)
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
			}
		}
		if(counter_second1>=time_green){
 8001044:	4b57      	ldr	r3, [pc, #348]	; (80011a4 <displayFour7Segemnt+0x2cc>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	4b57      	ldr	r3, [pc, #348]	; (80011a8 <displayFour7Segemnt+0x2d0>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	429a      	cmp	r2, r3
 800104e:	db26      	blt.n	800109e <displayFour7Segemnt+0x1c6>
			display7Segment34(time_yellow-counter_yellow-((time_yellow-counter_yellow)/10)*10);
 8001050:	4b57      	ldr	r3, [pc, #348]	; (80011b0 <displayFour7Segemnt+0x2d8>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	4b57      	ldr	r3, [pc, #348]	; (80011b4 <displayFour7Segemnt+0x2dc>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	1ad2      	subs	r2, r2, r3
 800105a:	4b51      	ldr	r3, [pc, #324]	; (80011a0 <displayFour7Segemnt+0x2c8>)
 800105c:	fb83 1302 	smull	r1, r3, r3, r2
 8001060:	1099      	asrs	r1, r3, #2
 8001062:	17d3      	asrs	r3, r2, #31
 8001064:	1ac9      	subs	r1, r1, r3
 8001066:	460b      	mov	r3, r1
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	440b      	add	r3, r1
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	1ad1      	subs	r1, r2, r3
 8001070:	4608      	mov	r0, r1
 8001072:	f7ff fa71 	bl	8000558 <display7Segment34>
			if(counter_yellow<time_yellow){
 8001076:	4b4f      	ldr	r3, [pc, #316]	; (80011b4 <displayFour7Segemnt+0x2dc>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	4b4d      	ldr	r3, [pc, #308]	; (80011b0 <displayFour7Segemnt+0x2d8>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	429a      	cmp	r2, r3
 8001080:	da0d      	bge.n	800109e <displayFour7Segemnt+0x1c6>
					counter_yellow++;
 8001082:	4b4c      	ldr	r3, [pc, #304]	; (80011b4 <displayFour7Segemnt+0x2dc>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	3301      	adds	r3, #1
 8001088:	4a4a      	ldr	r2, [pc, #296]	; (80011b4 <displayFour7Segemnt+0x2dc>)
 800108a:	6013      	str	r3, [r2, #0]
					if(counter_yellow>=time_yellow) counter_yellow=0;
 800108c:	4b49      	ldr	r3, [pc, #292]	; (80011b4 <displayFour7Segemnt+0x2dc>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	4b47      	ldr	r3, [pc, #284]	; (80011b0 <displayFour7Segemnt+0x2d8>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	429a      	cmp	r2, r3
 8001096:	db02      	blt.n	800109e <displayFour7Segemnt+0x1c6>
 8001098:	4b46      	ldr	r3, [pc, #280]	; (80011b4 <displayFour7Segemnt+0x2dc>)
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
			}
		}
		if(counter_red<time_red){
 800109e:	4b3f      	ldr	r3, [pc, #252]	; (800119c <displayFour7Segemnt+0x2c4>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	4b3d      	ldr	r3, [pc, #244]	; (8001198 <displayFour7Segemnt+0x2c0>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	da0d      	bge.n	80010c6 <displayFour7Segemnt+0x1ee>
				counter_red++;
 80010aa:	4b3c      	ldr	r3, [pc, #240]	; (800119c <displayFour7Segemnt+0x2c4>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	3301      	adds	r3, #1
 80010b0:	4a3a      	ldr	r2, [pc, #232]	; (800119c <displayFour7Segemnt+0x2c4>)
 80010b2:	6013      	str	r3, [r2, #0]
				if(counter_red>=time_red) counter_red=0;
 80010b4:	4b39      	ldr	r3, [pc, #228]	; (800119c <displayFour7Segemnt+0x2c4>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4b37      	ldr	r3, [pc, #220]	; (8001198 <displayFour7Segemnt+0x2c0>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	429a      	cmp	r2, r3
 80010be:	db02      	blt.n	80010c6 <displayFour7Segemnt+0x1ee>
 80010c0:	4b36      	ldr	r3, [pc, #216]	; (800119c <displayFour7Segemnt+0x2c4>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
		}
		counter_second1++;
 80010c6:	4b37      	ldr	r3, [pc, #220]	; (80011a4 <displayFour7Segemnt+0x2cc>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	3301      	adds	r3, #1
 80010cc:	4a35      	ldr	r2, [pc, #212]	; (80011a4 <displayFour7Segemnt+0x2cc>)
 80010ce:	6013      	str	r3, [r2, #0]
		if(counter_second1==time_red) counter_second1=0;
 80010d0:	4b34      	ldr	r3, [pc, #208]	; (80011a4 <displayFour7Segemnt+0x2cc>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	4b30      	ldr	r3, [pc, #192]	; (8001198 <displayFour7Segemnt+0x2c0>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d102      	bne.n	80010e2 <displayFour7Segemnt+0x20a>
 80010dc:	4b31      	ldr	r3, [pc, #196]	; (80011a4 <displayFour7Segemnt+0x2cc>)
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
	}
	//display led7segment 1 and 3
	if(state_led==1&&status_led7segment==0){
 80010e2:	4b2a      	ldr	r3, [pc, #168]	; (800118c <displayFour7Segemnt+0x2b4>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d166      	bne.n	80011b8 <displayFour7Segemnt+0x2e0>
 80010ea:	4b29      	ldr	r3, [pc, #164]	; (8001190 <displayFour7Segemnt+0x2b8>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d162      	bne.n	80011b8 <displayFour7Segemnt+0x2e0>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2140      	movs	r1, #64	; 0x40
 80010f6:	4827      	ldr	r0, [pc, #156]	; (8001194 <displayFour7Segemnt+0x2bc>)
 80010f8:	f000 ffc7 	bl	800208a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 80010fc:	2201      	movs	r2, #1
 80010fe:	2180      	movs	r1, #128	; 0x80
 8001100:	4824      	ldr	r0, [pc, #144]	; (8001194 <displayFour7Segemnt+0x2bc>)
 8001102:	f000 ffc2 	bl	800208a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 8001106:	2200      	movs	r2, #0
 8001108:	f44f 7180 	mov.w	r1, #256	; 0x100
 800110c:	4821      	ldr	r0, [pc, #132]	; (8001194 <displayFour7Segemnt+0x2bc>)
 800110e:	f000 ffbc 	bl	800208a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8001112:	2201      	movs	r2, #1
 8001114:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001118:	481e      	ldr	r0, [pc, #120]	; (8001194 <displayFour7Segemnt+0x2bc>)
 800111a:	f000 ffb6 	bl	800208a <HAL_GPIO_WritePin>
		display7Segment34((time_red-counter_red)/10);
 800111e:	4b1e      	ldr	r3, [pc, #120]	; (8001198 <displayFour7Segemnt+0x2c0>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	4b1e      	ldr	r3, [pc, #120]	; (800119c <displayFour7Segemnt+0x2c4>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	4a1d      	ldr	r2, [pc, #116]	; (80011a0 <displayFour7Segemnt+0x2c8>)
 800112a:	fb82 1203 	smull	r1, r2, r2, r3
 800112e:	1092      	asrs	r2, r2, #2
 8001130:	17db      	asrs	r3, r3, #31
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff fa0f 	bl	8000558 <display7Segment34>
		if(counter_second1<time_green) display7Segment12((time_green-counter_green)/10);
 800113a:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <displayFour7Segemnt+0x2cc>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	4b1a      	ldr	r3, [pc, #104]	; (80011a8 <displayFour7Segemnt+0x2d0>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	429a      	cmp	r2, r3
 8001144:	da0d      	bge.n	8001162 <displayFour7Segemnt+0x28a>
 8001146:	4b18      	ldr	r3, [pc, #96]	; (80011a8 <displayFour7Segemnt+0x2d0>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	4b18      	ldr	r3, [pc, #96]	; (80011ac <displayFour7Segemnt+0x2d4>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	4a13      	ldr	r2, [pc, #76]	; (80011a0 <displayFour7Segemnt+0x2c8>)
 8001152:	fb82 1203 	smull	r1, r2, r2, r3
 8001156:	1092      	asrs	r2, r2, #2
 8001158:	17db      	asrs	r3, r3, #31
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff f931 	bl	80003c4 <display7Segment12>
		if(counter_second1>=time_green) display7Segment12((time_yellow-counter_yellow)/10);
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <displayFour7Segemnt+0x2cc>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <displayFour7Segemnt+0x2d0>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	429a      	cmp	r2, r3
 800116c:	db24      	blt.n	80011b8 <displayFour7Segemnt+0x2e0>
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <displayFour7Segemnt+0x2d8>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <displayFour7Segemnt+0x2dc>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	4a09      	ldr	r2, [pc, #36]	; (80011a0 <displayFour7Segemnt+0x2c8>)
 800117a:	fb82 1203 	smull	r1, r2, r2, r3
 800117e:	1092      	asrs	r2, r2, #2
 8001180:	17db      	asrs	r3, r3, #31
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff f91d 	bl	80003c4 <display7Segment12>
 800118a:	e015      	b.n	80011b8 <displayFour7Segemnt+0x2e0>
 800118c:	20000098 	.word	0x20000098
 8001190:	200000a8 	.word	0x200000a8
 8001194:	40010800 	.word	0x40010800
 8001198:	2000003c 	.word	0x2000003c
 800119c:	2000009c 	.word	0x2000009c
 80011a0:	66666667 	.word	0x66666667
 80011a4:	200000ac 	.word	0x200000ac
 80011a8:	20000040 	.word	0x20000040
 80011ac:	200000a0 	.word	0x200000a0
 80011b0:	20000044 	.word	0x20000044
 80011b4:	200000a4 	.word	0x200000a4
	}
	//display led7segemnt 2 and 4
	if(state_led==1&&status_led7segment==1){
 80011b8:	4b5b      	ldr	r3, [pc, #364]	; (8001328 <displayFour7Segemnt+0x450>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	f040 80aa 	bne.w	8001316 <displayFour7Segemnt+0x43e>
 80011c2:	4b5a      	ldr	r3, [pc, #360]	; (800132c <displayFour7Segemnt+0x454>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	f040 80a5 	bne.w	8001316 <displayFour7Segemnt+0x43e>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 80011cc:	2201      	movs	r2, #1
 80011ce:	2140      	movs	r1, #64	; 0x40
 80011d0:	4857      	ldr	r0, [pc, #348]	; (8001330 <displayFour7Segemnt+0x458>)
 80011d2:	f000 ff5a 	bl	800208a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2180      	movs	r1, #128	; 0x80
 80011da:	4855      	ldr	r0, [pc, #340]	; (8001330 <displayFour7Segemnt+0x458>)
 80011dc:	f000 ff55 	bl	800208a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 80011e0:	2201      	movs	r2, #1
 80011e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011e6:	4852      	ldr	r0, [pc, #328]	; (8001330 <displayFour7Segemnt+0x458>)
 80011e8:	f000 ff4f 	bl	800208a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 80011ec:	2200      	movs	r2, #0
 80011ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011f2:	484f      	ldr	r0, [pc, #316]	; (8001330 <displayFour7Segemnt+0x458>)
 80011f4:	f000 ff49 	bl	800208a <HAL_GPIO_WritePin>
		display7Segment34(time_red-counter_red-((time_red-counter_red)/10)*10);
 80011f8:	4b4e      	ldr	r3, [pc, #312]	; (8001334 <displayFour7Segemnt+0x45c>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	4b4e      	ldr	r3, [pc, #312]	; (8001338 <displayFour7Segemnt+0x460>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	1ad2      	subs	r2, r2, r3
 8001202:	4b4e      	ldr	r3, [pc, #312]	; (800133c <displayFour7Segemnt+0x464>)
 8001204:	fb83 1302 	smull	r1, r3, r3, r2
 8001208:	1099      	asrs	r1, r3, #2
 800120a:	17d3      	asrs	r3, r2, #31
 800120c:	1ac9      	subs	r1, r1, r3
 800120e:	460b      	mov	r3, r1
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	440b      	add	r3, r1
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	1ad1      	subs	r1, r2, r3
 8001218:	4608      	mov	r0, r1
 800121a:	f7ff f99d 	bl	8000558 <display7Segment34>
		if(counter_second1<time_green) {
 800121e:	4b48      	ldr	r3, [pc, #288]	; (8001340 <displayFour7Segemnt+0x468>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	4b48      	ldr	r3, [pc, #288]	; (8001344 <displayFour7Segemnt+0x46c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	429a      	cmp	r2, r3
 8001228:	da26      	bge.n	8001278 <displayFour7Segemnt+0x3a0>
			display7Segment12(time_green-counter_green-((time_green-counter_green)/10)*10);
 800122a:	4b46      	ldr	r3, [pc, #280]	; (8001344 <displayFour7Segemnt+0x46c>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	4b46      	ldr	r3, [pc, #280]	; (8001348 <displayFour7Segemnt+0x470>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	1ad2      	subs	r2, r2, r3
 8001234:	4b41      	ldr	r3, [pc, #260]	; (800133c <displayFour7Segemnt+0x464>)
 8001236:	fb83 1302 	smull	r1, r3, r3, r2
 800123a:	1099      	asrs	r1, r3, #2
 800123c:	17d3      	asrs	r3, r2, #31
 800123e:	1ac9      	subs	r1, r1, r3
 8001240:	460b      	mov	r3, r1
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	440b      	add	r3, r1
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	1ad1      	subs	r1, r2, r3
 800124a:	4608      	mov	r0, r1
 800124c:	f7ff f8ba 	bl	80003c4 <display7Segment12>
			if(counter_green<time_green){
 8001250:	4b3d      	ldr	r3, [pc, #244]	; (8001348 <displayFour7Segemnt+0x470>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4b3b      	ldr	r3, [pc, #236]	; (8001344 <displayFour7Segemnt+0x46c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	429a      	cmp	r2, r3
 800125a:	da0d      	bge.n	8001278 <displayFour7Segemnt+0x3a0>
					counter_green++;
 800125c:	4b3a      	ldr	r3, [pc, #232]	; (8001348 <displayFour7Segemnt+0x470>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	3301      	adds	r3, #1
 8001262:	4a39      	ldr	r2, [pc, #228]	; (8001348 <displayFour7Segemnt+0x470>)
 8001264:	6013      	str	r3, [r2, #0]
					if(counter_green>=time_green) counter_green=0;
 8001266:	4b38      	ldr	r3, [pc, #224]	; (8001348 <displayFour7Segemnt+0x470>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	4b36      	ldr	r3, [pc, #216]	; (8001344 <displayFour7Segemnt+0x46c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	429a      	cmp	r2, r3
 8001270:	db02      	blt.n	8001278 <displayFour7Segemnt+0x3a0>
 8001272:	4b35      	ldr	r3, [pc, #212]	; (8001348 <displayFour7Segemnt+0x470>)
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
			}
		}
		if(counter_second1>=time_green){
 8001278:	4b31      	ldr	r3, [pc, #196]	; (8001340 <displayFour7Segemnt+0x468>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	4b31      	ldr	r3, [pc, #196]	; (8001344 <displayFour7Segemnt+0x46c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	429a      	cmp	r2, r3
 8001282:	db26      	blt.n	80012d2 <displayFour7Segemnt+0x3fa>
			display7Segment12(time_yellow-counter_yellow-((time_yellow-counter_yellow)/10)*10);
 8001284:	4b31      	ldr	r3, [pc, #196]	; (800134c <displayFour7Segemnt+0x474>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4b31      	ldr	r3, [pc, #196]	; (8001350 <displayFour7Segemnt+0x478>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	1ad2      	subs	r2, r2, r3
 800128e:	4b2b      	ldr	r3, [pc, #172]	; (800133c <displayFour7Segemnt+0x464>)
 8001290:	fb83 1302 	smull	r1, r3, r3, r2
 8001294:	1099      	asrs	r1, r3, #2
 8001296:	17d3      	asrs	r3, r2, #31
 8001298:	1ac9      	subs	r1, r1, r3
 800129a:	460b      	mov	r3, r1
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	440b      	add	r3, r1
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	1ad1      	subs	r1, r2, r3
 80012a4:	4608      	mov	r0, r1
 80012a6:	f7ff f88d 	bl	80003c4 <display7Segment12>
			if(counter_yellow<time_yellow){
 80012aa:	4b29      	ldr	r3, [pc, #164]	; (8001350 <displayFour7Segemnt+0x478>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	4b27      	ldr	r3, [pc, #156]	; (800134c <displayFour7Segemnt+0x474>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	da0d      	bge.n	80012d2 <displayFour7Segemnt+0x3fa>
					counter_yellow++;
 80012b6:	4b26      	ldr	r3, [pc, #152]	; (8001350 <displayFour7Segemnt+0x478>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	3301      	adds	r3, #1
 80012bc:	4a24      	ldr	r2, [pc, #144]	; (8001350 <displayFour7Segemnt+0x478>)
 80012be:	6013      	str	r3, [r2, #0]
					if(counter_yellow>=time_yellow) counter_yellow=0;
 80012c0:	4b23      	ldr	r3, [pc, #140]	; (8001350 <displayFour7Segemnt+0x478>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	4b21      	ldr	r3, [pc, #132]	; (800134c <displayFour7Segemnt+0x474>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	db02      	blt.n	80012d2 <displayFour7Segemnt+0x3fa>
 80012cc:	4b20      	ldr	r3, [pc, #128]	; (8001350 <displayFour7Segemnt+0x478>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
			}
		}
		if(counter_red<time_red){
 80012d2:	4b19      	ldr	r3, [pc, #100]	; (8001338 <displayFour7Segemnt+0x460>)
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	4b17      	ldr	r3, [pc, #92]	; (8001334 <displayFour7Segemnt+0x45c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	429a      	cmp	r2, r3
 80012dc:	da0d      	bge.n	80012fa <displayFour7Segemnt+0x422>
				counter_red++;
 80012de:	4b16      	ldr	r3, [pc, #88]	; (8001338 <displayFour7Segemnt+0x460>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	3301      	adds	r3, #1
 80012e4:	4a14      	ldr	r2, [pc, #80]	; (8001338 <displayFour7Segemnt+0x460>)
 80012e6:	6013      	str	r3, [r2, #0]
				if(counter_red>=time_red) counter_red=0;
 80012e8:	4b13      	ldr	r3, [pc, #76]	; (8001338 <displayFour7Segemnt+0x460>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4b11      	ldr	r3, [pc, #68]	; (8001334 <displayFour7Segemnt+0x45c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	db02      	blt.n	80012fa <displayFour7Segemnt+0x422>
 80012f4:	4b10      	ldr	r3, [pc, #64]	; (8001338 <displayFour7Segemnt+0x460>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
		}
		counter_second1++;
 80012fa:	4b11      	ldr	r3, [pc, #68]	; (8001340 <displayFour7Segemnt+0x468>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	3301      	adds	r3, #1
 8001300:	4a0f      	ldr	r2, [pc, #60]	; (8001340 <displayFour7Segemnt+0x468>)
 8001302:	6013      	str	r3, [r2, #0]
		if(counter_second1==time_red) counter_second1=0;
 8001304:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <displayFour7Segemnt+0x468>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4b0a      	ldr	r3, [pc, #40]	; (8001334 <displayFour7Segemnt+0x45c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	429a      	cmp	r2, r3
 800130e:	d102      	bne.n	8001316 <displayFour7Segemnt+0x43e>
 8001310:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <displayFour7Segemnt+0x468>)
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
	}
	status_led7segment=1-status_led7segment;
 8001316:	4b05      	ldr	r3, [pc, #20]	; (800132c <displayFour7Segemnt+0x454>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f1c3 0301 	rsb	r3, r3, #1
 800131e:	4a03      	ldr	r2, [pc, #12]	; (800132c <displayFour7Segemnt+0x454>)
 8001320:	6013      	str	r3, [r2, #0]
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000098 	.word	0x20000098
 800132c:	200000a8 	.word	0x200000a8
 8001330:	40010800 	.word	0x40010800
 8001334:	2000003c 	.word	0x2000003c
 8001338:	2000009c 	.word	0x2000009c
 800133c:	66666667 	.word	0x66666667
 8001340:	200000ac 	.word	0x200000ac
 8001344:	20000040 	.word	0x20000040
 8001348:	200000a0 	.word	0x200000a0
 800134c:	20000044 	.word	0x20000044
 8001350:	200000a4 	.word	0x200000a4

08001354 <setValueLocalNormalMode>:

void setValueLocalNormalMode(){
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
	//status of traffic light
	state_led=0;
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <setValueLocalNormalMode+0x38>)
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
	//the time of status of traffic light
	counter_second=-1;
 800135e:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <setValueLocalNormalMode+0x3c>)
 8001360:	f04f 32ff 	mov.w	r2, #4294967295
 8001364:	601a      	str	r2, [r3, #0]
	//countdown the time of led_red
	counter_red=0;
 8001366:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <setValueLocalNormalMode+0x40>)
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
	//countdown the time of led_green
	counter_green=0;
 800136c:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <setValueLocalNormalMode+0x44>)
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
	//countdown the time of led_yellow
	counter_yellow=0;
 8001372:	4b0a      	ldr	r3, [pc, #40]	; (800139c <setValueLocalNormalMode+0x48>)
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
	//turn on or turn off 4 led7segment
	status_led7segment=0;
 8001378:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <setValueLocalNormalMode+0x4c>)
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
	//count the time of led_green or led_yellow
	counter_second1=0;
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <setValueLocalNormalMode+0x50>)
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr
 800138c:	20000098 	.word	0x20000098
 8001390:	20000048 	.word	0x20000048
 8001394:	2000009c 	.word	0x2000009c
 8001398:	200000a0 	.word	0x200000a0
 800139c:	200000a4 	.word	0x200000a4
 80013a0:	200000a8 	.word	0x200000a8
 80013a4:	200000ac 	.word	0x200000ac

080013a8 <normalMode>:

void normalMode(){
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
	if(timer1_flag == 1){
 80013ac:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <normalMode+0x30>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d105      	bne.n	80013c0 <normalMode+0x18>
		setTimer1(1000);
 80013b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013b8:	f000 f90a 	bl	80015d0 <setTimer1>
		traffic_light();
 80013bc:	f7ff fca8 	bl	8000d10 <traffic_light>
	}
	if(timer2_flag == 1){
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <normalMode+0x34>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d105      	bne.n	80013d4 <normalMode+0x2c>
		setTimer2(500);
 80013c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013cc:	f000 f91c 	bl	8001608 <setTimer2>
		displayFour7Segemnt();
 80013d0:	f7ff fd82 	bl	8000ed8 <displayFour7Segemnt>
	}
}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	200000b8 	.word	0x200000b8
 80013dc:	200000c0 	.word	0x200000c0

080013e0 <redBlinking>:
 *
 *  Created on: Nov 14, 2023
 *      Author: AD
 */
#include "red_mode.h"
void redBlinking(){
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
	//turn off all led
	if(clear_all_traffic_led==0){
 80013e4:	4b1d      	ldr	r3, [pc, #116]	; (800145c <redBlinking+0x7c>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d126      	bne.n	800143a <redBlinking+0x5a>
		clear_all_traffic_led=1;
 80013ec:	4b1b      	ldr	r3, [pc, #108]	; (800145c <redBlinking+0x7c>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin,0);
 80013f2:	2200      	movs	r2, #0
 80013f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013f8:	4819      	ldr	r0, [pc, #100]	; (8001460 <redBlinking+0x80>)
 80013fa:	f000 fe46 	bl	800208a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin,0);
 80013fe:	2200      	movs	r2, #0
 8001400:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001404:	4816      	ldr	r0, [pc, #88]	; (8001460 <redBlinking+0x80>)
 8001406:	f000 fe40 	bl	800208a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin,0);
 800140a:	2200      	movs	r2, #0
 800140c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001410:	4813      	ldr	r0, [pc, #76]	; (8001460 <redBlinking+0x80>)
 8001412:	f000 fe3a 	bl	800208a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin,0);
 8001416:	2200      	movs	r2, #0
 8001418:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800141c:	4810      	ldr	r0, [pc, #64]	; (8001460 <redBlinking+0x80>)
 800141e:	f000 fe34 	bl	800208a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin,0);
 8001422:	2200      	movs	r2, #0
 8001424:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001428:	480d      	ldr	r0, [pc, #52]	; (8001460 <redBlinking+0x80>)
 800142a:	f000 fe2e 	bl	800208a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin,0);
 800142e:	2200      	movs	r2, #0
 8001430:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001434:	480a      	ldr	r0, [pc, #40]	; (8001460 <redBlinking+0x80>)
 8001436:	f000 fe28 	bl	800208a <HAL_GPIO_WritePin>
	}
	//blinking led-red
	if(clear_all_traffic_led==1){
 800143a:	4b08      	ldr	r3, [pc, #32]	; (800145c <redBlinking+0x7c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d109      	bne.n	8001456 <redBlinking+0x76>
		HAL_GPIO_TogglePin(RED1_GPIO_Port, RED1_Pin);
 8001442:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001446:	4806      	ldr	r0, [pc, #24]	; (8001460 <redBlinking+0x80>)
 8001448:	f000 fe37 	bl	80020ba <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(RED2_GPIO_Port, RED2_Pin);
 800144c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001450:	4803      	ldr	r0, [pc, #12]	; (8001460 <redBlinking+0x80>)
 8001452:	f000 fe32 	bl	80020ba <HAL_GPIO_TogglePin>
	}
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000090 	.word	0x20000090
 8001460:	40010800 	.word	0x40010800

08001464 <displayLed7SegmentRedMode>:

//turn on or turn off 4 led7segment
int statusLed7SegmentMode2=0;
void displayLed7SegmentRedMode(){
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
	//turn on led7segment 1 and 3
		if(statusLed7SegmentMode2==0){
 8001468:	4b2e      	ldr	r3, [pc, #184]	; (8001524 <displayLed7SegmentRedMode+0xc0>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d123      	bne.n	80014b8 <displayLed7SegmentRedMode+0x54>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 8001470:	2200      	movs	r2, #0
 8001472:	2140      	movs	r1, #64	; 0x40
 8001474:	482c      	ldr	r0, [pc, #176]	; (8001528 <displayLed7SegmentRedMode+0xc4>)
 8001476:	f000 fe08 	bl	800208a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 800147a:	2201      	movs	r2, #1
 800147c:	2180      	movs	r1, #128	; 0x80
 800147e:	482a      	ldr	r0, [pc, #168]	; (8001528 <displayLed7SegmentRedMode+0xc4>)
 8001480:	f000 fe03 	bl	800208a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 8001484:	2200      	movs	r2, #0
 8001486:	f44f 7180 	mov.w	r1, #256	; 0x100
 800148a:	4827      	ldr	r0, [pc, #156]	; (8001528 <displayLed7SegmentRedMode+0xc4>)
 800148c:	f000 fdfd 	bl	800208a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8001490:	2201      	movs	r2, #1
 8001492:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001496:	4824      	ldr	r0, [pc, #144]	; (8001528 <displayLed7SegmentRedMode+0xc4>)
 8001498:	f000 fdf7 	bl	800208a <HAL_GPIO_WritePin>
			display7Segment12(time_red/10);
 800149c:	4b23      	ldr	r3, [pc, #140]	; (800152c <displayLed7SegmentRedMode+0xc8>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a23      	ldr	r2, [pc, #140]	; (8001530 <displayLed7SegmentRedMode+0xcc>)
 80014a2:	fb82 1203 	smull	r1, r2, r2, r3
 80014a6:	1092      	asrs	r2, r2, #2
 80014a8:	17db      	asrs	r3, r3, #31
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7fe ff89 	bl	80003c4 <display7Segment12>
			display7Segment34(0);
 80014b2:	2000      	movs	r0, #0
 80014b4:	f7ff f850 	bl	8000558 <display7Segment34>
		}
		//turn on led7segment 2 and 4
		if(statusLed7SegmentMode2==1){
 80014b8:	4b1a      	ldr	r3, [pc, #104]	; (8001524 <displayLed7SegmentRedMode+0xc0>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d128      	bne.n	8001512 <displayLed7SegmentRedMode+0xae>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 80014c0:	2201      	movs	r2, #1
 80014c2:	2140      	movs	r1, #64	; 0x40
 80014c4:	4818      	ldr	r0, [pc, #96]	; (8001528 <displayLed7SegmentRedMode+0xc4>)
 80014c6:	f000 fde0 	bl	800208a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2180      	movs	r1, #128	; 0x80
 80014ce:	4816      	ldr	r0, [pc, #88]	; (8001528 <displayLed7SegmentRedMode+0xc4>)
 80014d0:	f000 fddb 	bl	800208a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 80014d4:	2201      	movs	r2, #1
 80014d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014da:	4813      	ldr	r0, [pc, #76]	; (8001528 <displayLed7SegmentRedMode+0xc4>)
 80014dc:	f000 fdd5 	bl	800208a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 80014e0:	2200      	movs	r2, #0
 80014e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014e6:	4810      	ldr	r0, [pc, #64]	; (8001528 <displayLed7SegmentRedMode+0xc4>)
 80014e8:	f000 fdcf 	bl	800208a <HAL_GPIO_WritePin>
			display7Segment12(time_red-10*(time_red/10));
 80014ec:	4b0f      	ldr	r3, [pc, #60]	; (800152c <displayLed7SegmentRedMode+0xc8>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <displayLed7SegmentRedMode+0xcc>)
 80014f2:	fb83 1302 	smull	r1, r3, r3, r2
 80014f6:	1099      	asrs	r1, r3, #2
 80014f8:	17d3      	asrs	r3, r2, #31
 80014fa:	1ac9      	subs	r1, r1, r3
 80014fc:	460b      	mov	r3, r1
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	440b      	add	r3, r1
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	1ad1      	subs	r1, r2, r3
 8001506:	4608      	mov	r0, r1
 8001508:	f7fe ff5c 	bl	80003c4 <display7Segment12>
			display7Segment34(2);
 800150c:	2002      	movs	r0, #2
 800150e:	f7ff f823 	bl	8000558 <display7Segment34>
		}
		statusLed7SegmentMode2=1-statusLed7SegmentMode2;
 8001512:	4b04      	ldr	r3, [pc, #16]	; (8001524 <displayLed7SegmentRedMode+0xc0>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f1c3 0301 	rsb	r3, r3, #1
 800151a:	4a02      	ldr	r2, [pc, #8]	; (8001524 <displayLed7SegmentRedMode+0xc0>)
 800151c:	6013      	str	r3, [r2, #0]
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200000b0 	.word	0x200000b0
 8001528:	40010800 	.word	0x40010800
 800152c:	2000003c 	.word	0x2000003c
 8001530:	66666667 	.word	0x66666667

08001534 <addTimeRed>:
void addTimeRed(){
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
	if(button_flag[1]==1 || button_pressed_1s_flag[1]==1){
 8001538:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <addTimeRed+0x40>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d003      	beq.n	8001548 <addTimeRed+0x14>
 8001540:	4b0d      	ldr	r3, [pc, #52]	; (8001578 <addTimeRed+0x44>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d111      	bne.n	800156c <addTimeRed+0x38>
		button_flag[1]=0;
 8001548:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <addTimeRed+0x40>)
 800154a:	2200      	movs	r2, #0
 800154c:	605a      	str	r2, [r3, #4]
		button_pressed_1s_flag[1]=0;
 800154e:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <addTimeRed+0x44>)
 8001550:	2200      	movs	r2, #0
 8001552:	605a      	str	r2, [r3, #4]
		time_red++;
 8001554:	4b09      	ldr	r3, [pc, #36]	; (800157c <addTimeRed+0x48>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	3301      	adds	r3, #1
 800155a:	4a08      	ldr	r2, [pc, #32]	; (800157c <addTimeRed+0x48>)
 800155c:	6013      	str	r3, [r2, #0]
		if(time_red>99) time_red=1;
 800155e:	4b07      	ldr	r3, [pc, #28]	; (800157c <addTimeRed+0x48>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2b63      	cmp	r3, #99	; 0x63
 8001564:	dd02      	ble.n	800156c <addTimeRed+0x38>
 8001566:	4b05      	ldr	r3, [pc, #20]	; (800157c <addTimeRed+0x48>)
 8001568:	2201      	movs	r2, #1
 800156a:	601a      	str	r2, [r3, #0]
	}
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr
 8001574:	20000074 	.word	0x20000074
 8001578:	20000080 	.word	0x20000080
 800157c:	2000003c 	.word	0x2000003c

08001580 <setTimeRed>:

void setTimeRed(){
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
		time_green=time_red-time_yellow;
 8001584:	4b05      	ldr	r3, [pc, #20]	; (800159c <setTimeRed+0x1c>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <setTimeRed+0x20>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	4a05      	ldr	r2, [pc, #20]	; (80015a4 <setTimeRed+0x24>)
 8001590:	6013      	str	r3, [r2, #0]
}
 8001592:	bf00      	nop
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	2000003c 	.word	0x2000003c
 80015a0:	20000044 	.word	0x20000044
 80015a4:	20000040 	.word	0x20000040

080015a8 <redMode>:

void redMode(){
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
	addTimeRed();
 80015ac:	f7ff ffc2 	bl	8001534 <addTimeRed>
	if(timer1_flag==1){
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <redMode+0x24>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d107      	bne.n	80015c8 <redMode+0x20>
		setTimer1(500);
 80015b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015bc:	f000 f808 	bl	80015d0 <setTimer1>
		redBlinking();
 80015c0:	f7ff ff0e 	bl	80013e0 <redBlinking>
		displayLed7SegmentRedMode();
 80015c4:	f7ff ff4e 	bl	8001464 <displayLed7SegmentRedMode>
	}

}
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	200000b8 	.word	0x200000b8

080015d0 <setTimer1>:
int timer2_counter = 0;
int timer2_flag = 0;
int timer3_counter = 0;
int timer3_flag = 0;

void setTimer1(int duration){
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4a08      	ldr	r2, [pc, #32]	; (80015fc <setTimer1+0x2c>)
 80015dc:	fb82 1203 	smull	r1, r2, r2, r3
 80015e0:	1092      	asrs	r2, r2, #2
 80015e2:	17db      	asrs	r3, r3, #31
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	4a06      	ldr	r2, [pc, #24]	; (8001600 <setTimer1+0x30>)
 80015e8:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80015ea:	4b06      	ldr	r3, [pc, #24]	; (8001604 <setTimer1+0x34>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc80      	pop	{r7}
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	66666667 	.word	0x66666667
 8001600:	200000b4 	.word	0x200000b4
 8001604:	200000b8 	.word	0x200000b8

08001608 <setTimer2>:
void setTimer2(int duration){
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a08      	ldr	r2, [pc, #32]	; (8001634 <setTimer2+0x2c>)
 8001614:	fb82 1203 	smull	r1, r2, r2, r3
 8001618:	1092      	asrs	r2, r2, #2
 800161a:	17db      	asrs	r3, r3, #31
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	4a06      	ldr	r2, [pc, #24]	; (8001638 <setTimer2+0x30>)
 8001620:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <setTimer2+0x34>)
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	66666667 	.word	0x66666667
 8001638:	200000bc 	.word	0x200000bc
 800163c:	200000c0 	.word	0x200000c0

08001640 <setTimer3>:
void setTimer3(int duration){
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / TIMER_CYCLE;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a08      	ldr	r2, [pc, #32]	; (800166c <setTimer3+0x2c>)
 800164c:	fb82 1203 	smull	r1, r2, r2, r3
 8001650:	1092      	asrs	r2, r2, #2
 8001652:	17db      	asrs	r3, r3, #31
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	4a06      	ldr	r2, [pc, #24]	; (8001670 <setTimer3+0x30>)
 8001658:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800165a:	4b06      	ldr	r3, [pc, #24]	; (8001674 <setTimer3+0x34>)
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	66666667 	.word	0x66666667
 8001670:	200000c4 	.word	0x200000c4
 8001674:	200000c8 	.word	0x200000c8

08001678 <timerRun>:
void timerRun(){
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 800167c:	4b19      	ldr	r3, [pc, #100]	; (80016e4 <timerRun+0x6c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	dd0b      	ble.n	800169c <timerRun+0x24>
		timer1_counter --;
 8001684:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <timerRun+0x6c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	3b01      	subs	r3, #1
 800168a:	4a16      	ldr	r2, [pc, #88]	; (80016e4 <timerRun+0x6c>)
 800168c:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 800168e:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <timerRun+0x6c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	dc02      	bgt.n	800169c <timerRun+0x24>
			timer1_flag = 1;
 8001696:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <timerRun+0x70>)
 8001698:	2201      	movs	r2, #1
 800169a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0){
 800169c:	4b13      	ldr	r3, [pc, #76]	; (80016ec <timerRun+0x74>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	dd0b      	ble.n	80016bc <timerRun+0x44>
			timer2_counter --;
 80016a4:	4b11      	ldr	r3, [pc, #68]	; (80016ec <timerRun+0x74>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	3b01      	subs	r3, #1
 80016aa:	4a10      	ldr	r2, [pc, #64]	; (80016ec <timerRun+0x74>)
 80016ac:	6013      	str	r3, [r2, #0]
			if(timer2_counter <= 0){
 80016ae:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <timerRun+0x74>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	dc02      	bgt.n	80016bc <timerRun+0x44>
				timer2_flag = 1;
 80016b6:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <timerRun+0x78>)
 80016b8:	2201      	movs	r2, #1
 80016ba:	601a      	str	r2, [r3, #0]
			}
		}
	if(timer3_counter > 0){
 80016bc:	4b0d      	ldr	r3, [pc, #52]	; (80016f4 <timerRun+0x7c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	dd0b      	ble.n	80016dc <timerRun+0x64>
			timer3_counter --;
 80016c4:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <timerRun+0x7c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	3b01      	subs	r3, #1
 80016ca:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <timerRun+0x7c>)
 80016cc:	6013      	str	r3, [r2, #0]
			if(timer3_counter <= 0){
 80016ce:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <timerRun+0x7c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	dc02      	bgt.n	80016dc <timerRun+0x64>
				timer3_flag = 1;
 80016d6:	4b08      	ldr	r3, [pc, #32]	; (80016f8 <timerRun+0x80>)
 80016d8:	2201      	movs	r2, #1
 80016da:	601a      	str	r2, [r3, #0]
			}
		}
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr
 80016e4:	200000b4 	.word	0x200000b4
 80016e8:	200000b8 	.word	0x200000b8
 80016ec:	200000bc 	.word	0x200000bc
 80016f0:	200000c0 	.word	0x200000c0
 80016f4:	200000c4 	.word	0x200000c4
 80016f8:	200000c8 	.word	0x200000c8

080016fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001702:	4b15      	ldr	r3, [pc, #84]	; (8001758 <HAL_MspInit+0x5c>)
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	4a14      	ldr	r2, [pc, #80]	; (8001758 <HAL_MspInit+0x5c>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6193      	str	r3, [r2, #24]
 800170e:	4b12      	ldr	r3, [pc, #72]	; (8001758 <HAL_MspInit+0x5c>)
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800171a:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <HAL_MspInit+0x5c>)
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	4a0e      	ldr	r2, [pc, #56]	; (8001758 <HAL_MspInit+0x5c>)
 8001720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001724:	61d3      	str	r3, [r2, #28]
 8001726:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <HAL_MspInit+0x5c>)
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172e:	607b      	str	r3, [r7, #4]
 8001730:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001732:	4b0a      	ldr	r3, [pc, #40]	; (800175c <HAL_MspInit+0x60>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	4a04      	ldr	r2, [pc, #16]	; (800175c <HAL_MspInit+0x60>)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800174e:	bf00      	nop
 8001750:	3714      	adds	r7, #20
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr
 8001758:	40021000 	.word	0x40021000
 800175c:	40010000 	.word	0x40010000

08001760 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001770:	d113      	bne.n	800179a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001772:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <HAL_TIM_Base_MspInit+0x44>)
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	4a0b      	ldr	r2, [pc, #44]	; (80017a4 <HAL_TIM_Base_MspInit+0x44>)
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	61d3      	str	r3, [r2, #28]
 800177e:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <HAL_TIM_Base_MspInit+0x44>)
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800178a:	2200      	movs	r2, #0
 800178c:	2100      	movs	r1, #0
 800178e:	201c      	movs	r0, #28
 8001790:	f000 fab3 	bl	8001cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001794:	201c      	movs	r0, #28
 8001796:	f000 facc 	bl	8001d32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800179a:	bf00      	nop
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40021000 	.word	0x40021000

080017a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017ac:	e7fe      	b.n	80017ac <NMI_Handler+0x4>

080017ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017b2:	e7fe      	b.n	80017b2 <HardFault_Handler+0x4>

080017b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <MemManage_Handler+0x4>

080017ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017be:	e7fe      	b.n	80017be <BusFault_Handler+0x4>

080017c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <UsageFault_Handler+0x4>

080017c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr

080017d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr

080017de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr

080017ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ee:	f000 f991 	bl	8001b14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017fc:	4802      	ldr	r0, [pc, #8]	; (8001808 <TIM2_IRQHandler+0x10>)
 80017fe:	f001 f8ed 	bl	80029dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	200000d0 	.word	0x200000d0

0800180c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr

08001818 <yellowBlinking>:
 *
 *  Created on: Nov 14, 2023
 *      Author: AD
 */
#include "green_mode.h"
void yellowBlinking(){
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
	//turn off all led
	if(clear_all_traffic_led==0){
 800181c:	4b1d      	ldr	r3, [pc, #116]	; (8001894 <yellowBlinking+0x7c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d126      	bne.n	8001872 <yellowBlinking+0x5a>
		clear_all_traffic_led=1;
 8001824:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <yellowBlinking+0x7c>)
 8001826:	2201      	movs	r2, #1
 8001828:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin,0);
 800182a:	2200      	movs	r2, #0
 800182c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001830:	4819      	ldr	r0, [pc, #100]	; (8001898 <yellowBlinking+0x80>)
 8001832:	f000 fc2a 	bl	800208a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin,0);
 8001836:	2200      	movs	r2, #0
 8001838:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800183c:	4816      	ldr	r0, [pc, #88]	; (8001898 <yellowBlinking+0x80>)
 800183e:	f000 fc24 	bl	800208a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin,0);
 8001842:	2200      	movs	r2, #0
 8001844:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001848:	4813      	ldr	r0, [pc, #76]	; (8001898 <yellowBlinking+0x80>)
 800184a:	f000 fc1e 	bl	800208a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin,0);
 800184e:	2200      	movs	r2, #0
 8001850:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001854:	4810      	ldr	r0, [pc, #64]	; (8001898 <yellowBlinking+0x80>)
 8001856:	f000 fc18 	bl	800208a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin,0);
 800185a:	2200      	movs	r2, #0
 800185c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001860:	480d      	ldr	r0, [pc, #52]	; (8001898 <yellowBlinking+0x80>)
 8001862:	f000 fc12 	bl	800208a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin,0);
 8001866:	2200      	movs	r2, #0
 8001868:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800186c:	480a      	ldr	r0, [pc, #40]	; (8001898 <yellowBlinking+0x80>)
 800186e:	f000 fc0c 	bl	800208a <HAL_GPIO_WritePin>
	}
	//blinking led-green
	if(clear_all_traffic_led==1){
 8001872:	4b08      	ldr	r3, [pc, #32]	; (8001894 <yellowBlinking+0x7c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d109      	bne.n	800188e <yellowBlinking+0x76>
		HAL_GPIO_TogglePin(YELLOW1_GPIO_Port, YELLOW1_Pin);
 800187a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800187e:	4806      	ldr	r0, [pc, #24]	; (8001898 <yellowBlinking+0x80>)
 8001880:	f000 fc1b 	bl	80020ba <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(YELLOW2_GPIO_Port, YELLOW2_Pin);
 8001884:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001888:	4803      	ldr	r0, [pc, #12]	; (8001898 <yellowBlinking+0x80>)
 800188a:	f000 fc16 	bl	80020ba <HAL_GPIO_TogglePin>
	}
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20000090 	.word	0x20000090
 8001898:	40010800 	.word	0x40010800

0800189c <displayLed7SegmentYellowMode>:

//turn on or turn off 4 led7segment
int statusLed7SegmentMode4=0;
void displayLed7SegmentYellowMode(){
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
	//turn on led7segment 1 and 3
		if(statusLed7SegmentMode4==0){
 80018a0:	4b2e      	ldr	r3, [pc, #184]	; (800195c <displayLed7SegmentYellowMode+0xc0>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d123      	bne.n	80018f0 <displayLed7SegmentYellowMode+0x54>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 80018a8:	2200      	movs	r2, #0
 80018aa:	2140      	movs	r1, #64	; 0x40
 80018ac:	482c      	ldr	r0, [pc, #176]	; (8001960 <displayLed7SegmentYellowMode+0xc4>)
 80018ae:	f000 fbec 	bl	800208a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 80018b2:	2201      	movs	r2, #1
 80018b4:	2180      	movs	r1, #128	; 0x80
 80018b6:	482a      	ldr	r0, [pc, #168]	; (8001960 <displayLed7SegmentYellowMode+0xc4>)
 80018b8:	f000 fbe7 	bl	800208a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 80018bc:	2200      	movs	r2, #0
 80018be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018c2:	4827      	ldr	r0, [pc, #156]	; (8001960 <displayLed7SegmentYellowMode+0xc4>)
 80018c4:	f000 fbe1 	bl	800208a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 80018c8:	2201      	movs	r2, #1
 80018ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018ce:	4824      	ldr	r0, [pc, #144]	; (8001960 <displayLed7SegmentYellowMode+0xc4>)
 80018d0:	f000 fbdb 	bl	800208a <HAL_GPIO_WritePin>
			display7Segment12(time_yellow/10);
 80018d4:	4b23      	ldr	r3, [pc, #140]	; (8001964 <displayLed7SegmentYellowMode+0xc8>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a23      	ldr	r2, [pc, #140]	; (8001968 <displayLed7SegmentYellowMode+0xcc>)
 80018da:	fb82 1203 	smull	r1, r2, r2, r3
 80018de:	1092      	asrs	r2, r2, #2
 80018e0:	17db      	asrs	r3, r3, #31
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7fe fd6d 	bl	80003c4 <display7Segment12>
			display7Segment34(0);
 80018ea:	2000      	movs	r0, #0
 80018ec:	f7fe fe34 	bl	8000558 <display7Segment34>
		}
		//turn on led7segment 2 and 4
		if(statusLed7SegmentMode4==1){
 80018f0:	4b1a      	ldr	r3, [pc, #104]	; (800195c <displayLed7SegmentYellowMode+0xc0>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d128      	bne.n	800194a <displayLed7SegmentYellowMode+0xae>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 80018f8:	2201      	movs	r2, #1
 80018fa:	2140      	movs	r1, #64	; 0x40
 80018fc:	4818      	ldr	r0, [pc, #96]	; (8001960 <displayLed7SegmentYellowMode+0xc4>)
 80018fe:	f000 fbc4 	bl	800208a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	2180      	movs	r1, #128	; 0x80
 8001906:	4816      	ldr	r0, [pc, #88]	; (8001960 <displayLed7SegmentYellowMode+0xc4>)
 8001908:	f000 fbbf 	bl	800208a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 800190c:	2201      	movs	r2, #1
 800190e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001912:	4813      	ldr	r0, [pc, #76]	; (8001960 <displayLed7SegmentYellowMode+0xc4>)
 8001914:	f000 fbb9 	bl	800208a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 8001918:	2200      	movs	r2, #0
 800191a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800191e:	4810      	ldr	r0, [pc, #64]	; (8001960 <displayLed7SegmentYellowMode+0xc4>)
 8001920:	f000 fbb3 	bl	800208a <HAL_GPIO_WritePin>
			display7Segment12(time_yellow-10*(time_yellow/10));
 8001924:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <displayLed7SegmentYellowMode+0xc8>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	4b0f      	ldr	r3, [pc, #60]	; (8001968 <displayLed7SegmentYellowMode+0xcc>)
 800192a:	fb83 1302 	smull	r1, r3, r3, r2
 800192e:	1099      	asrs	r1, r3, #2
 8001930:	17d3      	asrs	r3, r2, #31
 8001932:	1ac9      	subs	r1, r1, r3
 8001934:	460b      	mov	r3, r1
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	440b      	add	r3, r1
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	1ad1      	subs	r1, r2, r3
 800193e:	4608      	mov	r0, r1
 8001940:	f7fe fd40 	bl	80003c4 <display7Segment12>
			display7Segment34(4);
 8001944:	2004      	movs	r0, #4
 8001946:	f7fe fe07 	bl	8000558 <display7Segment34>
		}
		statusLed7SegmentMode4=1-statusLed7SegmentMode4;
 800194a:	4b04      	ldr	r3, [pc, #16]	; (800195c <displayLed7SegmentYellowMode+0xc0>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f1c3 0301 	rsb	r3, r3, #1
 8001952:	4a02      	ldr	r2, [pc, #8]	; (800195c <displayLed7SegmentYellowMode+0xc0>)
 8001954:	6013      	str	r3, [r2, #0]
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	200000cc 	.word	0x200000cc
 8001960:	40010800 	.word	0x40010800
 8001964:	20000044 	.word	0x20000044
 8001968:	66666667 	.word	0x66666667

0800196c <addTimeYellow>:

//increase the timer of led-green when press button 2(button_flag[1]=1)
void addTimeYellow(){
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
	if(button_flag[1]==1 || button_pressed_1s_flag[1]==1){
 8001970:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <addTimeYellow+0x40>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d003      	beq.n	8001980 <addTimeYellow+0x14>
 8001978:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <addTimeYellow+0x44>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d111      	bne.n	80019a4 <addTimeYellow+0x38>
		button_flag[1]=0;
 8001980:	4b0a      	ldr	r3, [pc, #40]	; (80019ac <addTimeYellow+0x40>)
 8001982:	2200      	movs	r2, #0
 8001984:	605a      	str	r2, [r3, #4]
		button_pressed_1s_flag[1]=0;
 8001986:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <addTimeYellow+0x44>)
 8001988:	2200      	movs	r2, #0
 800198a:	605a      	str	r2, [r3, #4]
		time_yellow++;
 800198c:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <addTimeYellow+0x48>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	3301      	adds	r3, #1
 8001992:	4a08      	ldr	r2, [pc, #32]	; (80019b4 <addTimeYellow+0x48>)
 8001994:	6013      	str	r3, [r2, #0]
		if(time_green>99) time_yellow=1;
 8001996:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <addTimeYellow+0x4c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2b63      	cmp	r3, #99	; 0x63
 800199c:	dd02      	ble.n	80019a4 <addTimeYellow+0x38>
 800199e:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <addTimeYellow+0x48>)
 80019a0:	2201      	movs	r2, #1
 80019a2:	601a      	str	r2, [r3, #0]
	}
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr
 80019ac:	20000074 	.word	0x20000074
 80019b0:	20000080 	.word	0x20000080
 80019b4:	20000044 	.word	0x20000044
 80019b8:	20000040 	.word	0x20000040

080019bc <setTimeYellow>:

void setTimeYellow(){
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
		if(time_green+time_yellow>99) {
 80019c0:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <setTimeYellow+0x4c>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <setTimeYellow+0x50>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4413      	add	r3, r2
 80019ca:	2b63      	cmp	r3, #99	; 0x63
 80019cc:	dd09      	ble.n	80019e2 <setTimeYellow+0x26>
			time_red=99;
 80019ce:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <setTimeYellow+0x54>)
 80019d0:	2263      	movs	r2, #99	; 0x63
 80019d2:	601a      	str	r2, [r3, #0]
			time_green=time_red-time_yellow;
 80019d4:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <setTimeYellow+0x54>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <setTimeYellow+0x50>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	4a0a      	ldr	r2, [pc, #40]	; (8001a08 <setTimeYellow+0x4c>)
 80019e0:	6013      	str	r3, [r2, #0]
		}
		if(time_green+time_yellow<=99) {
 80019e2:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <setTimeYellow+0x4c>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <setTimeYellow+0x50>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4413      	add	r3, r2
 80019ec:	2b63      	cmp	r3, #99	; 0x63
 80019ee:	dc06      	bgt.n	80019fe <setTimeYellow+0x42>
			time_red=time_green+time_yellow;
 80019f0:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <setTimeYellow+0x4c>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <setTimeYellow+0x50>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4413      	add	r3, r2
 80019fa:	4a05      	ldr	r2, [pc, #20]	; (8001a10 <setTimeYellow+0x54>)
 80019fc:	6013      	str	r3, [r2, #0]
	    }
}
 80019fe:	bf00      	nop
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bc80      	pop	{r7}
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	20000040 	.word	0x20000040
 8001a0c:	20000044 	.word	0x20000044
 8001a10:	2000003c 	.word	0x2000003c

08001a14 <yellowMode>:

void yellowMode(){
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
	addTimeYellow();
 8001a18:	f7ff ffa8 	bl	800196c <addTimeYellow>
	if(timer1_flag==1){
 8001a1c:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <yellowMode+0x24>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d107      	bne.n	8001a34 <yellowMode+0x20>
		setTimer1(500);
 8001a24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a28:	f7ff fdd2 	bl	80015d0 <setTimer1>
		yellowBlinking();
 8001a2c:	f7ff fef4 	bl	8001818 <yellowBlinking>
		displayLed7SegmentYellowMode();
 8001a30:	f7ff ff34 	bl	800189c <displayLed7SegmentYellowMode>
	}

}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	200000b8 	.word	0x200000b8

08001a3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a3c:	f7ff fee6 	bl	800180c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a40:	480b      	ldr	r0, [pc, #44]	; (8001a70 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a42:	490c      	ldr	r1, [pc, #48]	; (8001a74 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a44:	4a0c      	ldr	r2, [pc, #48]	; (8001a78 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a48:	e002      	b.n	8001a50 <LoopCopyDataInit>

08001a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a4e:	3304      	adds	r3, #4

08001a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a54:	d3f9      	bcc.n	8001a4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a56:	4a09      	ldr	r2, [pc, #36]	; (8001a7c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a58:	4c09      	ldr	r4, [pc, #36]	; (8001a80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a5c:	e001      	b.n	8001a62 <LoopFillZerobss>

08001a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a60:	3204      	adds	r2, #4

08001a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a64:	d3fb      	bcc.n	8001a5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a66:	f001 fb05 	bl	8003074 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a6a:	f7ff f81b 	bl	8000aa4 <main>
  bx lr
 8001a6e:	4770      	bx	lr
  ldr r0, =_sdata
 8001a70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a74:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8001a78:	08003110 	.word	0x08003110
  ldr r2, =_sbss
 8001a7c:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8001a80:	2000011c 	.word	0x2000011c

08001a84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a84:	e7fe      	b.n	8001a84 <ADC1_2_IRQHandler>
	...

08001a88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a8c:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <HAL_Init+0x28>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a07      	ldr	r2, [pc, #28]	; (8001ab0 <HAL_Init+0x28>)
 8001a92:	f043 0310 	orr.w	r3, r3, #16
 8001a96:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a98:	2003      	movs	r0, #3
 8001a9a:	f000 f923 	bl	8001ce4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a9e:	200f      	movs	r0, #15
 8001aa0:	f000 f808 	bl	8001ab4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aa4:	f7ff fe2a 	bl	80016fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40022000 	.word	0x40022000

08001ab4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001abc:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <HAL_InitTick+0x54>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <HAL_InitTick+0x58>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f000 f93b 	bl	8001d4e <HAL_SYSTICK_Config>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e00e      	b.n	8001b00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2b0f      	cmp	r3, #15
 8001ae6:	d80a      	bhi.n	8001afe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ae8:	2200      	movs	r2, #0
 8001aea:	6879      	ldr	r1, [r7, #4]
 8001aec:	f04f 30ff 	mov.w	r0, #4294967295
 8001af0:	f000 f903 	bl	8001cfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001af4:	4a06      	ldr	r2, [pc, #24]	; (8001b10 <HAL_InitTick+0x5c>)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
 8001afc:	e000      	b.n	8001b00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	2000004c 	.word	0x2000004c
 8001b0c:	20000054 	.word	0x20000054
 8001b10:	20000050 	.word	0x20000050

08001b14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b18:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <HAL_IncTick+0x1c>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <HAL_IncTick+0x20>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4413      	add	r3, r2
 8001b24:	4a03      	ldr	r2, [pc, #12]	; (8001b34 <HAL_IncTick+0x20>)
 8001b26:	6013      	str	r3, [r2, #0]
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr
 8001b30:	20000054 	.word	0x20000054
 8001b34:	20000118 	.word	0x20000118

08001b38 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b3c:	4b02      	ldr	r3, [pc, #8]	; (8001b48 <HAL_GetTick+0x10>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr
 8001b48:	20000118 	.word	0x20000118

08001b4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <__NVIC_SetPriorityGrouping+0x44>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b62:	68ba      	ldr	r2, [r7, #8]
 8001b64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b68:	4013      	ands	r3, r2
 8001b6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b7e:	4a04      	ldr	r2, [pc, #16]	; (8001b90 <__NVIC_SetPriorityGrouping+0x44>)
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	60d3      	str	r3, [r2, #12]
}
 8001b84:	bf00      	nop
 8001b86:	3714      	adds	r7, #20
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bc80      	pop	{r7}
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b98:	4b04      	ldr	r3, [pc, #16]	; (8001bac <__NVIC_GetPriorityGrouping+0x18>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	0a1b      	lsrs	r3, r3, #8
 8001b9e:	f003 0307 	and.w	r3, r3, #7
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	db0b      	blt.n	8001bda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	f003 021f 	and.w	r2, r3, #31
 8001bc8:	4906      	ldr	r1, [pc, #24]	; (8001be4 <__NVIC_EnableIRQ+0x34>)
 8001bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bce:	095b      	lsrs	r3, r3, #5
 8001bd0:	2001      	movs	r0, #1
 8001bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr
 8001be4:	e000e100 	.word	0xe000e100

08001be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	6039      	str	r1, [r7, #0]
 8001bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	db0a      	blt.n	8001c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	b2da      	uxtb	r2, r3
 8001c00:	490c      	ldr	r1, [pc, #48]	; (8001c34 <__NVIC_SetPriority+0x4c>)
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	0112      	lsls	r2, r2, #4
 8001c08:	b2d2      	uxtb	r2, r2
 8001c0a:	440b      	add	r3, r1
 8001c0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c10:	e00a      	b.n	8001c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	4908      	ldr	r1, [pc, #32]	; (8001c38 <__NVIC_SetPriority+0x50>)
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	3b04      	subs	r3, #4
 8001c20:	0112      	lsls	r2, r2, #4
 8001c22:	b2d2      	uxtb	r2, r2
 8001c24:	440b      	add	r3, r1
 8001c26:	761a      	strb	r2, [r3, #24]
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	e000e100 	.word	0xe000e100
 8001c38:	e000ed00 	.word	0xe000ed00

08001c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b089      	sub	sp, #36	; 0x24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f1c3 0307 	rsb	r3, r3, #7
 8001c56:	2b04      	cmp	r3, #4
 8001c58:	bf28      	it	cs
 8001c5a:	2304      	movcs	r3, #4
 8001c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	3304      	adds	r3, #4
 8001c62:	2b06      	cmp	r3, #6
 8001c64:	d902      	bls.n	8001c6c <NVIC_EncodePriority+0x30>
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	3b03      	subs	r3, #3
 8001c6a:	e000      	b.n	8001c6e <NVIC_EncodePriority+0x32>
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c70:	f04f 32ff 	mov.w	r2, #4294967295
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43da      	mvns	r2, r3
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	401a      	ands	r2, r3
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c84:	f04f 31ff 	mov.w	r1, #4294967295
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8e:	43d9      	mvns	r1, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c94:	4313      	orrs	r3, r2
         );
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3724      	adds	r7, #36	; 0x24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr

08001ca0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3b01      	subs	r3, #1
 8001cac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cb0:	d301      	bcc.n	8001cb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e00f      	b.n	8001cd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cb6:	4a0a      	ldr	r2, [pc, #40]	; (8001ce0 <SysTick_Config+0x40>)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cbe:	210f      	movs	r1, #15
 8001cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc4:	f7ff ff90 	bl	8001be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cc8:	4b05      	ldr	r3, [pc, #20]	; (8001ce0 <SysTick_Config+0x40>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cce:	4b04      	ldr	r3, [pc, #16]	; (8001ce0 <SysTick_Config+0x40>)
 8001cd0:	2207      	movs	r2, #7
 8001cd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	e000e010 	.word	0xe000e010

08001ce4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff ff2d 	bl	8001b4c <__NVIC_SetPriorityGrouping>
}
 8001cf2:	bf00      	nop
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b086      	sub	sp, #24
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	4603      	mov	r3, r0
 8001d02:	60b9      	str	r1, [r7, #8]
 8001d04:	607a      	str	r2, [r7, #4]
 8001d06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d0c:	f7ff ff42 	bl	8001b94 <__NVIC_GetPriorityGrouping>
 8001d10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	68b9      	ldr	r1, [r7, #8]
 8001d16:	6978      	ldr	r0, [r7, #20]
 8001d18:	f7ff ff90 	bl	8001c3c <NVIC_EncodePriority>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d22:	4611      	mov	r1, r2
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff ff5f 	bl	8001be8 <__NVIC_SetPriority>
}
 8001d2a:	bf00      	nop
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b082      	sub	sp, #8
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	4603      	mov	r3, r0
 8001d3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff ff35 	bl	8001bb0 <__NVIC_EnableIRQ>
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b082      	sub	sp, #8
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7ff ffa2 	bl	8001ca0 <SysTick_Config>
 8001d5c:	4603      	mov	r3, r0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b08b      	sub	sp, #44	; 0x2c
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d72:	2300      	movs	r3, #0
 8001d74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d76:	2300      	movs	r3, #0
 8001d78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d7a:	e148      	b.n	800200e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	69fa      	ldr	r2, [r7, #28]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	f040 8137 	bne.w	8002008 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	4aa3      	ldr	r2, [pc, #652]	; (800202c <HAL_GPIO_Init+0x2c4>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d05e      	beq.n	8001e62 <HAL_GPIO_Init+0xfa>
 8001da4:	4aa1      	ldr	r2, [pc, #644]	; (800202c <HAL_GPIO_Init+0x2c4>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d875      	bhi.n	8001e96 <HAL_GPIO_Init+0x12e>
 8001daa:	4aa1      	ldr	r2, [pc, #644]	; (8002030 <HAL_GPIO_Init+0x2c8>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d058      	beq.n	8001e62 <HAL_GPIO_Init+0xfa>
 8001db0:	4a9f      	ldr	r2, [pc, #636]	; (8002030 <HAL_GPIO_Init+0x2c8>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d86f      	bhi.n	8001e96 <HAL_GPIO_Init+0x12e>
 8001db6:	4a9f      	ldr	r2, [pc, #636]	; (8002034 <HAL_GPIO_Init+0x2cc>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d052      	beq.n	8001e62 <HAL_GPIO_Init+0xfa>
 8001dbc:	4a9d      	ldr	r2, [pc, #628]	; (8002034 <HAL_GPIO_Init+0x2cc>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d869      	bhi.n	8001e96 <HAL_GPIO_Init+0x12e>
 8001dc2:	4a9d      	ldr	r2, [pc, #628]	; (8002038 <HAL_GPIO_Init+0x2d0>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d04c      	beq.n	8001e62 <HAL_GPIO_Init+0xfa>
 8001dc8:	4a9b      	ldr	r2, [pc, #620]	; (8002038 <HAL_GPIO_Init+0x2d0>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d863      	bhi.n	8001e96 <HAL_GPIO_Init+0x12e>
 8001dce:	4a9b      	ldr	r2, [pc, #620]	; (800203c <HAL_GPIO_Init+0x2d4>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d046      	beq.n	8001e62 <HAL_GPIO_Init+0xfa>
 8001dd4:	4a99      	ldr	r2, [pc, #612]	; (800203c <HAL_GPIO_Init+0x2d4>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d85d      	bhi.n	8001e96 <HAL_GPIO_Init+0x12e>
 8001dda:	2b12      	cmp	r3, #18
 8001ddc:	d82a      	bhi.n	8001e34 <HAL_GPIO_Init+0xcc>
 8001dde:	2b12      	cmp	r3, #18
 8001de0:	d859      	bhi.n	8001e96 <HAL_GPIO_Init+0x12e>
 8001de2:	a201      	add	r2, pc, #4	; (adr r2, 8001de8 <HAL_GPIO_Init+0x80>)
 8001de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de8:	08001e63 	.word	0x08001e63
 8001dec:	08001e3d 	.word	0x08001e3d
 8001df0:	08001e4f 	.word	0x08001e4f
 8001df4:	08001e91 	.word	0x08001e91
 8001df8:	08001e97 	.word	0x08001e97
 8001dfc:	08001e97 	.word	0x08001e97
 8001e00:	08001e97 	.word	0x08001e97
 8001e04:	08001e97 	.word	0x08001e97
 8001e08:	08001e97 	.word	0x08001e97
 8001e0c:	08001e97 	.word	0x08001e97
 8001e10:	08001e97 	.word	0x08001e97
 8001e14:	08001e97 	.word	0x08001e97
 8001e18:	08001e97 	.word	0x08001e97
 8001e1c:	08001e97 	.word	0x08001e97
 8001e20:	08001e97 	.word	0x08001e97
 8001e24:	08001e97 	.word	0x08001e97
 8001e28:	08001e97 	.word	0x08001e97
 8001e2c:	08001e45 	.word	0x08001e45
 8001e30:	08001e59 	.word	0x08001e59
 8001e34:	4a82      	ldr	r2, [pc, #520]	; (8002040 <HAL_GPIO_Init+0x2d8>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d013      	beq.n	8001e62 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e3a:	e02c      	b.n	8001e96 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	623b      	str	r3, [r7, #32]
          break;
 8001e42:	e029      	b.n	8001e98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	3304      	adds	r3, #4
 8001e4a:	623b      	str	r3, [r7, #32]
          break;
 8001e4c:	e024      	b.n	8001e98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	3308      	adds	r3, #8
 8001e54:	623b      	str	r3, [r7, #32]
          break;
 8001e56:	e01f      	b.n	8001e98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	330c      	adds	r3, #12
 8001e5e:	623b      	str	r3, [r7, #32]
          break;
 8001e60:	e01a      	b.n	8001e98 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d102      	bne.n	8001e70 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e6a:	2304      	movs	r3, #4
 8001e6c:	623b      	str	r3, [r7, #32]
          break;
 8001e6e:	e013      	b.n	8001e98 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d105      	bne.n	8001e84 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e78:	2308      	movs	r3, #8
 8001e7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	69fa      	ldr	r2, [r7, #28]
 8001e80:	611a      	str	r2, [r3, #16]
          break;
 8001e82:	e009      	b.n	8001e98 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e84:	2308      	movs	r3, #8
 8001e86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	69fa      	ldr	r2, [r7, #28]
 8001e8c:	615a      	str	r2, [r3, #20]
          break;
 8001e8e:	e003      	b.n	8001e98 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e90:	2300      	movs	r3, #0
 8001e92:	623b      	str	r3, [r7, #32]
          break;
 8001e94:	e000      	b.n	8001e98 <HAL_GPIO_Init+0x130>
          break;
 8001e96:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	2bff      	cmp	r3, #255	; 0xff
 8001e9c:	d801      	bhi.n	8001ea2 <HAL_GPIO_Init+0x13a>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	e001      	b.n	8001ea6 <HAL_GPIO_Init+0x13e>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	2bff      	cmp	r3, #255	; 0xff
 8001eac:	d802      	bhi.n	8001eb4 <HAL_GPIO_Init+0x14c>
 8001eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	e002      	b.n	8001eba <HAL_GPIO_Init+0x152>
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb6:	3b08      	subs	r3, #8
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	210f      	movs	r1, #15
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	401a      	ands	r2, r3
 8001ecc:	6a39      	ldr	r1, [r7, #32]
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f000 8090 	beq.w	8002008 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ee8:	4b56      	ldr	r3, [pc, #344]	; (8002044 <HAL_GPIO_Init+0x2dc>)
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	4a55      	ldr	r2, [pc, #340]	; (8002044 <HAL_GPIO_Init+0x2dc>)
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	6193      	str	r3, [r2, #24]
 8001ef4:	4b53      	ldr	r3, [pc, #332]	; (8002044 <HAL_GPIO_Init+0x2dc>)
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	60bb      	str	r3, [r7, #8]
 8001efe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f00:	4a51      	ldr	r2, [pc, #324]	; (8002048 <HAL_GPIO_Init+0x2e0>)
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	089b      	lsrs	r3, r3, #2
 8001f06:	3302      	adds	r3, #2
 8001f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f0c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	f003 0303 	and.w	r3, r3, #3
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	220f      	movs	r2, #15
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	4013      	ands	r3, r2
 8001f22:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a49      	ldr	r2, [pc, #292]	; (800204c <HAL_GPIO_Init+0x2e4>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d00d      	beq.n	8001f48 <HAL_GPIO_Init+0x1e0>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a48      	ldr	r2, [pc, #288]	; (8002050 <HAL_GPIO_Init+0x2e8>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d007      	beq.n	8001f44 <HAL_GPIO_Init+0x1dc>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a47      	ldr	r2, [pc, #284]	; (8002054 <HAL_GPIO_Init+0x2ec>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d101      	bne.n	8001f40 <HAL_GPIO_Init+0x1d8>
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	e004      	b.n	8001f4a <HAL_GPIO_Init+0x1e2>
 8001f40:	2303      	movs	r3, #3
 8001f42:	e002      	b.n	8001f4a <HAL_GPIO_Init+0x1e2>
 8001f44:	2301      	movs	r3, #1
 8001f46:	e000      	b.n	8001f4a <HAL_GPIO_Init+0x1e2>
 8001f48:	2300      	movs	r3, #0
 8001f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f4c:	f002 0203 	and.w	r2, r2, #3
 8001f50:	0092      	lsls	r2, r2, #2
 8001f52:	4093      	lsls	r3, r2
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f5a:	493b      	ldr	r1, [pc, #236]	; (8002048 <HAL_GPIO_Init+0x2e0>)
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5e:	089b      	lsrs	r3, r3, #2
 8001f60:	3302      	adds	r3, #2
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d006      	beq.n	8001f82 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f74:	4b38      	ldr	r3, [pc, #224]	; (8002058 <HAL_GPIO_Init+0x2f0>)
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	4937      	ldr	r1, [pc, #220]	; (8002058 <HAL_GPIO_Init+0x2f0>)
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	608b      	str	r3, [r1, #8]
 8001f80:	e006      	b.n	8001f90 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f82:	4b35      	ldr	r3, [pc, #212]	; (8002058 <HAL_GPIO_Init+0x2f0>)
 8001f84:	689a      	ldr	r2, [r3, #8]
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	4933      	ldr	r1, [pc, #204]	; (8002058 <HAL_GPIO_Init+0x2f0>)
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d006      	beq.n	8001faa <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f9c:	4b2e      	ldr	r3, [pc, #184]	; (8002058 <HAL_GPIO_Init+0x2f0>)
 8001f9e:	68da      	ldr	r2, [r3, #12]
 8001fa0:	492d      	ldr	r1, [pc, #180]	; (8002058 <HAL_GPIO_Init+0x2f0>)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	60cb      	str	r3, [r1, #12]
 8001fa8:	e006      	b.n	8001fb8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001faa:	4b2b      	ldr	r3, [pc, #172]	; (8002058 <HAL_GPIO_Init+0x2f0>)
 8001fac:	68da      	ldr	r2, [r3, #12]
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	4929      	ldr	r1, [pc, #164]	; (8002058 <HAL_GPIO_Init+0x2f0>)
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d006      	beq.n	8001fd2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fc4:	4b24      	ldr	r3, [pc, #144]	; (8002058 <HAL_GPIO_Init+0x2f0>)
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	4923      	ldr	r1, [pc, #140]	; (8002058 <HAL_GPIO_Init+0x2f0>)
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	604b      	str	r3, [r1, #4]
 8001fd0:	e006      	b.n	8001fe0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fd2:	4b21      	ldr	r3, [pc, #132]	; (8002058 <HAL_GPIO_Init+0x2f0>)
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	491f      	ldr	r1, [pc, #124]	; (8002058 <HAL_GPIO_Init+0x2f0>)
 8001fdc:	4013      	ands	r3, r2
 8001fde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d006      	beq.n	8001ffa <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fec:	4b1a      	ldr	r3, [pc, #104]	; (8002058 <HAL_GPIO_Init+0x2f0>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	4919      	ldr	r1, [pc, #100]	; (8002058 <HAL_GPIO_Init+0x2f0>)
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	600b      	str	r3, [r1, #0]
 8001ff8:	e006      	b.n	8002008 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ffa:	4b17      	ldr	r3, [pc, #92]	; (8002058 <HAL_GPIO_Init+0x2f0>)
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	43db      	mvns	r3, r3
 8002002:	4915      	ldr	r1, [pc, #84]	; (8002058 <HAL_GPIO_Init+0x2f0>)
 8002004:	4013      	ands	r3, r2
 8002006:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200a:	3301      	adds	r3, #1
 800200c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002014:	fa22 f303 	lsr.w	r3, r2, r3
 8002018:	2b00      	cmp	r3, #0
 800201a:	f47f aeaf 	bne.w	8001d7c <HAL_GPIO_Init+0x14>
  }
}
 800201e:	bf00      	nop
 8002020:	bf00      	nop
 8002022:	372c      	adds	r7, #44	; 0x2c
 8002024:	46bd      	mov	sp, r7
 8002026:	bc80      	pop	{r7}
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	10320000 	.word	0x10320000
 8002030:	10310000 	.word	0x10310000
 8002034:	10220000 	.word	0x10220000
 8002038:	10210000 	.word	0x10210000
 800203c:	10120000 	.word	0x10120000
 8002040:	10110000 	.word	0x10110000
 8002044:	40021000 	.word	0x40021000
 8002048:	40010000 	.word	0x40010000
 800204c:	40010800 	.word	0x40010800
 8002050:	40010c00 	.word	0x40010c00
 8002054:	40011000 	.word	0x40011000
 8002058:	40010400 	.word	0x40010400

0800205c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	460b      	mov	r3, r1
 8002066:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	887b      	ldrh	r3, [r7, #2]
 800206e:	4013      	ands	r3, r2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d002      	beq.n	800207a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002074:	2301      	movs	r3, #1
 8002076:	73fb      	strb	r3, [r7, #15]
 8002078:	e001      	b.n	800207e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800207a:	2300      	movs	r3, #0
 800207c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800207e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3714      	adds	r7, #20
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr

0800208a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
 8002092:	460b      	mov	r3, r1
 8002094:	807b      	strh	r3, [r7, #2]
 8002096:	4613      	mov	r3, r2
 8002098:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800209a:	787b      	ldrb	r3, [r7, #1]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d003      	beq.n	80020a8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020a0:	887a      	ldrh	r2, [r7, #2]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020a6:	e003      	b.n	80020b0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020a8:	887b      	ldrh	r3, [r7, #2]
 80020aa:	041a      	lsls	r2, r3, #16
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	611a      	str	r2, [r3, #16]
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bc80      	pop	{r7}
 80020b8:	4770      	bx	lr

080020ba <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b085      	sub	sp, #20
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
 80020c2:	460b      	mov	r3, r1
 80020c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020cc:	887a      	ldrh	r2, [r7, #2]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	4013      	ands	r3, r2
 80020d2:	041a      	lsls	r2, r3, #16
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	43d9      	mvns	r1, r3
 80020d8:	887b      	ldrh	r3, [r7, #2]
 80020da:	400b      	ands	r3, r1
 80020dc:	431a      	orrs	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	611a      	str	r2, [r3, #16]
}
 80020e2:	bf00      	nop
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bc80      	pop	{r7}
 80020ea:	4770      	bx	lr

080020ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e26c      	b.n	80025d8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 8087 	beq.w	800221a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800210c:	4b92      	ldr	r3, [pc, #584]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 030c 	and.w	r3, r3, #12
 8002114:	2b04      	cmp	r3, #4
 8002116:	d00c      	beq.n	8002132 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002118:	4b8f      	ldr	r3, [pc, #572]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 030c 	and.w	r3, r3, #12
 8002120:	2b08      	cmp	r3, #8
 8002122:	d112      	bne.n	800214a <HAL_RCC_OscConfig+0x5e>
 8002124:	4b8c      	ldr	r3, [pc, #560]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800212c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002130:	d10b      	bne.n	800214a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002132:	4b89      	ldr	r3, [pc, #548]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d06c      	beq.n	8002218 <HAL_RCC_OscConfig+0x12c>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d168      	bne.n	8002218 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e246      	b.n	80025d8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002152:	d106      	bne.n	8002162 <HAL_RCC_OscConfig+0x76>
 8002154:	4b80      	ldr	r3, [pc, #512]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a7f      	ldr	r2, [pc, #508]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 800215a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800215e:	6013      	str	r3, [r2, #0]
 8002160:	e02e      	b.n	80021c0 <HAL_RCC_OscConfig+0xd4>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10c      	bne.n	8002184 <HAL_RCC_OscConfig+0x98>
 800216a:	4b7b      	ldr	r3, [pc, #492]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a7a      	ldr	r2, [pc, #488]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002170:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	4b78      	ldr	r3, [pc, #480]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a77      	ldr	r2, [pc, #476]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 800217c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002180:	6013      	str	r3, [r2, #0]
 8002182:	e01d      	b.n	80021c0 <HAL_RCC_OscConfig+0xd4>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800218c:	d10c      	bne.n	80021a8 <HAL_RCC_OscConfig+0xbc>
 800218e:	4b72      	ldr	r3, [pc, #456]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a71      	ldr	r2, [pc, #452]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002194:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002198:	6013      	str	r3, [r2, #0]
 800219a:	4b6f      	ldr	r3, [pc, #444]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a6e      	ldr	r2, [pc, #440]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a4:	6013      	str	r3, [r2, #0]
 80021a6:	e00b      	b.n	80021c0 <HAL_RCC_OscConfig+0xd4>
 80021a8:	4b6b      	ldr	r3, [pc, #428]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a6a      	ldr	r2, [pc, #424]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 80021ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021b2:	6013      	str	r3, [r2, #0]
 80021b4:	4b68      	ldr	r3, [pc, #416]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a67      	ldr	r2, [pc, #412]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 80021ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d013      	beq.n	80021f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c8:	f7ff fcb6 	bl	8001b38 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021d0:	f7ff fcb2 	bl	8001b38 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b64      	cmp	r3, #100	; 0x64
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e1fa      	b.n	80025d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e2:	4b5d      	ldr	r3, [pc, #372]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d0f0      	beq.n	80021d0 <HAL_RCC_OscConfig+0xe4>
 80021ee:	e014      	b.n	800221a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f0:	f7ff fca2 	bl	8001b38 <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021f8:	f7ff fc9e 	bl	8001b38 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b64      	cmp	r3, #100	; 0x64
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e1e6      	b.n	80025d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800220a:	4b53      	ldr	r3, [pc, #332]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1f0      	bne.n	80021f8 <HAL_RCC_OscConfig+0x10c>
 8002216:	e000      	b.n	800221a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002218:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d063      	beq.n	80022ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002226:	4b4c      	ldr	r3, [pc, #304]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f003 030c 	and.w	r3, r3, #12
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00b      	beq.n	800224a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002232:	4b49      	ldr	r3, [pc, #292]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f003 030c 	and.w	r3, r3, #12
 800223a:	2b08      	cmp	r3, #8
 800223c:	d11c      	bne.n	8002278 <HAL_RCC_OscConfig+0x18c>
 800223e:	4b46      	ldr	r3, [pc, #280]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d116      	bne.n	8002278 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800224a:	4b43      	ldr	r3, [pc, #268]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d005      	beq.n	8002262 <HAL_RCC_OscConfig+0x176>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d001      	beq.n	8002262 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e1ba      	b.n	80025d8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002262:	4b3d      	ldr	r3, [pc, #244]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	4939      	ldr	r1, [pc, #228]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002272:	4313      	orrs	r3, r2
 8002274:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002276:	e03a      	b.n	80022ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d020      	beq.n	80022c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002280:	4b36      	ldr	r3, [pc, #216]	; (800235c <HAL_RCC_OscConfig+0x270>)
 8002282:	2201      	movs	r2, #1
 8002284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002286:	f7ff fc57 	bl	8001b38 <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800228c:	e008      	b.n	80022a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800228e:	f7ff fc53 	bl	8001b38 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e19b      	b.n	80025d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a0:	4b2d      	ldr	r3, [pc, #180]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0f0      	beq.n	800228e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ac:	4b2a      	ldr	r3, [pc, #168]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	4927      	ldr	r1, [pc, #156]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	600b      	str	r3, [r1, #0]
 80022c0:	e015      	b.n	80022ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022c2:	4b26      	ldr	r3, [pc, #152]	; (800235c <HAL_RCC_OscConfig+0x270>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c8:	f7ff fc36 	bl	8001b38 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022d0:	f7ff fc32 	bl	8001b38 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e17a      	b.n	80025d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022e2:	4b1d      	ldr	r3, [pc, #116]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f0      	bne.n	80022d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0308 	and.w	r3, r3, #8
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d03a      	beq.n	8002370 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d019      	beq.n	8002336 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002302:	4b17      	ldr	r3, [pc, #92]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 8002304:	2201      	movs	r2, #1
 8002306:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002308:	f7ff fc16 	bl	8001b38 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002310:	f7ff fc12 	bl	8001b38 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e15a      	b.n	80025d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002322:	4b0d      	ldr	r3, [pc, #52]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d0f0      	beq.n	8002310 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800232e:	2001      	movs	r0, #1
 8002330:	f000 fa9a 	bl	8002868 <RCC_Delay>
 8002334:	e01c      	b.n	8002370 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002336:	4b0a      	ldr	r3, [pc, #40]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800233c:	f7ff fbfc 	bl	8001b38 <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002342:	e00f      	b.n	8002364 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002344:	f7ff fbf8 	bl	8001b38 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d908      	bls.n	8002364 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e140      	b.n	80025d8 <HAL_RCC_OscConfig+0x4ec>
 8002356:	bf00      	nop
 8002358:	40021000 	.word	0x40021000
 800235c:	42420000 	.word	0x42420000
 8002360:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002364:	4b9e      	ldr	r3, [pc, #632]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 8002366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1e9      	bne.n	8002344 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 80a6 	beq.w	80024ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800237e:	2300      	movs	r3, #0
 8002380:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002382:	4b97      	ldr	r3, [pc, #604]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10d      	bne.n	80023aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800238e:	4b94      	ldr	r3, [pc, #592]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	4a93      	ldr	r2, [pc, #588]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 8002394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002398:	61d3      	str	r3, [r2, #28]
 800239a:	4b91      	ldr	r3, [pc, #580]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a2:	60bb      	str	r3, [r7, #8]
 80023a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023a6:	2301      	movs	r3, #1
 80023a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023aa:	4b8e      	ldr	r3, [pc, #568]	; (80025e4 <HAL_RCC_OscConfig+0x4f8>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d118      	bne.n	80023e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023b6:	4b8b      	ldr	r3, [pc, #556]	; (80025e4 <HAL_RCC_OscConfig+0x4f8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a8a      	ldr	r2, [pc, #552]	; (80025e4 <HAL_RCC_OscConfig+0x4f8>)
 80023bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023c2:	f7ff fbb9 	bl	8001b38 <HAL_GetTick>
 80023c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c8:	e008      	b.n	80023dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ca:	f7ff fbb5 	bl	8001b38 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b64      	cmp	r3, #100	; 0x64
 80023d6:	d901      	bls.n	80023dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e0fd      	b.n	80025d8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023dc:	4b81      	ldr	r3, [pc, #516]	; (80025e4 <HAL_RCC_OscConfig+0x4f8>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0f0      	beq.n	80023ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d106      	bne.n	80023fe <HAL_RCC_OscConfig+0x312>
 80023f0:	4b7b      	ldr	r3, [pc, #492]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	4a7a      	ldr	r2, [pc, #488]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 80023f6:	f043 0301 	orr.w	r3, r3, #1
 80023fa:	6213      	str	r3, [r2, #32]
 80023fc:	e02d      	b.n	800245a <HAL_RCC_OscConfig+0x36e>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10c      	bne.n	8002420 <HAL_RCC_OscConfig+0x334>
 8002406:	4b76      	ldr	r3, [pc, #472]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	4a75      	ldr	r2, [pc, #468]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 800240c:	f023 0301 	bic.w	r3, r3, #1
 8002410:	6213      	str	r3, [r2, #32]
 8002412:	4b73      	ldr	r3, [pc, #460]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 8002414:	6a1b      	ldr	r3, [r3, #32]
 8002416:	4a72      	ldr	r2, [pc, #456]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 8002418:	f023 0304 	bic.w	r3, r3, #4
 800241c:	6213      	str	r3, [r2, #32]
 800241e:	e01c      	b.n	800245a <HAL_RCC_OscConfig+0x36e>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	2b05      	cmp	r3, #5
 8002426:	d10c      	bne.n	8002442 <HAL_RCC_OscConfig+0x356>
 8002428:	4b6d      	ldr	r3, [pc, #436]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	4a6c      	ldr	r2, [pc, #432]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 800242e:	f043 0304 	orr.w	r3, r3, #4
 8002432:	6213      	str	r3, [r2, #32]
 8002434:	4b6a      	ldr	r3, [pc, #424]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	4a69      	ldr	r2, [pc, #420]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 800243a:	f043 0301 	orr.w	r3, r3, #1
 800243e:	6213      	str	r3, [r2, #32]
 8002440:	e00b      	b.n	800245a <HAL_RCC_OscConfig+0x36e>
 8002442:	4b67      	ldr	r3, [pc, #412]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	4a66      	ldr	r2, [pc, #408]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 8002448:	f023 0301 	bic.w	r3, r3, #1
 800244c:	6213      	str	r3, [r2, #32]
 800244e:	4b64      	ldr	r3, [pc, #400]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	4a63      	ldr	r2, [pc, #396]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 8002454:	f023 0304 	bic.w	r3, r3, #4
 8002458:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d015      	beq.n	800248e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002462:	f7ff fb69 	bl	8001b38 <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002468:	e00a      	b.n	8002480 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800246a:	f7ff fb65 	bl	8001b38 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	f241 3288 	movw	r2, #5000	; 0x1388
 8002478:	4293      	cmp	r3, r2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e0ab      	b.n	80025d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002480:	4b57      	ldr	r3, [pc, #348]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0ee      	beq.n	800246a <HAL_RCC_OscConfig+0x37e>
 800248c:	e014      	b.n	80024b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800248e:	f7ff fb53 	bl	8001b38 <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002494:	e00a      	b.n	80024ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002496:	f7ff fb4f 	bl	8001b38 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e095      	b.n	80025d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ac:	4b4c      	ldr	r3, [pc, #304]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1ee      	bne.n	8002496 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024b8:	7dfb      	ldrb	r3, [r7, #23]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d105      	bne.n	80024ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024be:	4b48      	ldr	r3, [pc, #288]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	4a47      	ldr	r2, [pc, #284]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 80024c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f000 8081 	beq.w	80025d6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024d4:	4b42      	ldr	r3, [pc, #264]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f003 030c 	and.w	r3, r3, #12
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d061      	beq.n	80025a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	69db      	ldr	r3, [r3, #28]
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d146      	bne.n	8002576 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e8:	4b3f      	ldr	r3, [pc, #252]	; (80025e8 <HAL_RCC_OscConfig+0x4fc>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ee:	f7ff fb23 	bl	8001b38 <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024f4:	e008      	b.n	8002508 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f6:	f7ff fb1f 	bl	8001b38 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e067      	b.n	80025d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002508:	4b35      	ldr	r3, [pc, #212]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1f0      	bne.n	80024f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800251c:	d108      	bne.n	8002530 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800251e:	4b30      	ldr	r3, [pc, #192]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	492d      	ldr	r1, [pc, #180]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 800252c:	4313      	orrs	r3, r2
 800252e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002530:	4b2b      	ldr	r3, [pc, #172]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a19      	ldr	r1, [r3, #32]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002540:	430b      	orrs	r3, r1
 8002542:	4927      	ldr	r1, [pc, #156]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 8002544:	4313      	orrs	r3, r2
 8002546:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002548:	4b27      	ldr	r3, [pc, #156]	; (80025e8 <HAL_RCC_OscConfig+0x4fc>)
 800254a:	2201      	movs	r2, #1
 800254c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254e:	f7ff faf3 	bl	8001b38 <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002554:	e008      	b.n	8002568 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002556:	f7ff faef 	bl	8001b38 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e037      	b.n	80025d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002568:	4b1d      	ldr	r3, [pc, #116]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0f0      	beq.n	8002556 <HAL_RCC_OscConfig+0x46a>
 8002574:	e02f      	b.n	80025d6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002576:	4b1c      	ldr	r3, [pc, #112]	; (80025e8 <HAL_RCC_OscConfig+0x4fc>)
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257c:	f7ff fadc 	bl	8001b38 <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002584:	f7ff fad8 	bl	8001b38 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e020      	b.n	80025d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002596:	4b12      	ldr	r3, [pc, #72]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1f0      	bne.n	8002584 <HAL_RCC_OscConfig+0x498>
 80025a2:	e018      	b.n	80025d6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d101      	bne.n	80025b0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e013      	b.n	80025d8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025b0:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <HAL_RCC_OscConfig+0x4f4>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d106      	bne.n	80025d2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d001      	beq.n	80025d6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40021000 	.word	0x40021000
 80025e4:	40007000 	.word	0x40007000
 80025e8:	42420060 	.word	0x42420060

080025ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d101      	bne.n	8002600 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e0d0      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002600:	4b6a      	ldr	r3, [pc, #424]	; (80027ac <HAL_RCC_ClockConfig+0x1c0>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	429a      	cmp	r2, r3
 800260c:	d910      	bls.n	8002630 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800260e:	4b67      	ldr	r3, [pc, #412]	; (80027ac <HAL_RCC_ClockConfig+0x1c0>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f023 0207 	bic.w	r2, r3, #7
 8002616:	4965      	ldr	r1, [pc, #404]	; (80027ac <HAL_RCC_ClockConfig+0x1c0>)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	4313      	orrs	r3, r2
 800261c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800261e:	4b63      	ldr	r3, [pc, #396]	; (80027ac <HAL_RCC_ClockConfig+0x1c0>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	429a      	cmp	r2, r3
 800262a:	d001      	beq.n	8002630 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e0b8      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d020      	beq.n	800267e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	2b00      	cmp	r3, #0
 8002646:	d005      	beq.n	8002654 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002648:	4b59      	ldr	r3, [pc, #356]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	4a58      	ldr	r2, [pc, #352]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 800264e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002652:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0308 	and.w	r3, r3, #8
 800265c:	2b00      	cmp	r3, #0
 800265e:	d005      	beq.n	800266c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002660:	4b53      	ldr	r3, [pc, #332]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	4a52      	ldr	r2, [pc, #328]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002666:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800266a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800266c:	4b50      	ldr	r3, [pc, #320]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	494d      	ldr	r1, [pc, #308]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 800267a:	4313      	orrs	r3, r2
 800267c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b00      	cmp	r3, #0
 8002688:	d040      	beq.n	800270c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d107      	bne.n	80026a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002692:	4b47      	ldr	r3, [pc, #284]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d115      	bne.n	80026ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e07f      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d107      	bne.n	80026ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026aa:	4b41      	ldr	r3, [pc, #260]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d109      	bne.n	80026ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e073      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ba:	4b3d      	ldr	r3, [pc, #244]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e06b      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ca:	4b39      	ldr	r3, [pc, #228]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f023 0203 	bic.w	r2, r3, #3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	4936      	ldr	r1, [pc, #216]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026dc:	f7ff fa2c 	bl	8001b38 <HAL_GetTick>
 80026e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e2:	e00a      	b.n	80026fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e4:	f7ff fa28 	bl	8001b38 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e053      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fa:	4b2d      	ldr	r3, [pc, #180]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f003 020c 	and.w	r2, r3, #12
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	429a      	cmp	r2, r3
 800270a:	d1eb      	bne.n	80026e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800270c:	4b27      	ldr	r3, [pc, #156]	; (80027ac <HAL_RCC_ClockConfig+0x1c0>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0307 	and.w	r3, r3, #7
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	429a      	cmp	r2, r3
 8002718:	d210      	bcs.n	800273c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271a:	4b24      	ldr	r3, [pc, #144]	; (80027ac <HAL_RCC_ClockConfig+0x1c0>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f023 0207 	bic.w	r2, r3, #7
 8002722:	4922      	ldr	r1, [pc, #136]	; (80027ac <HAL_RCC_ClockConfig+0x1c0>)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	4313      	orrs	r3, r2
 8002728:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800272a:	4b20      	ldr	r3, [pc, #128]	; (80027ac <HAL_RCC_ClockConfig+0x1c0>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	429a      	cmp	r2, r3
 8002736:	d001      	beq.n	800273c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e032      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0304 	and.w	r3, r3, #4
 8002744:	2b00      	cmp	r3, #0
 8002746:	d008      	beq.n	800275a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002748:	4b19      	ldr	r3, [pc, #100]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	4916      	ldr	r1, [pc, #88]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002756:	4313      	orrs	r3, r2
 8002758:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0308 	and.w	r3, r3, #8
 8002762:	2b00      	cmp	r3, #0
 8002764:	d009      	beq.n	800277a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002766:	4b12      	ldr	r3, [pc, #72]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	490e      	ldr	r1, [pc, #56]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002776:	4313      	orrs	r3, r2
 8002778:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800277a:	f000 f821 	bl	80027c0 <HAL_RCC_GetSysClockFreq>
 800277e:	4602      	mov	r2, r0
 8002780:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	091b      	lsrs	r3, r3, #4
 8002786:	f003 030f 	and.w	r3, r3, #15
 800278a:	490a      	ldr	r1, [pc, #40]	; (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 800278c:	5ccb      	ldrb	r3, [r1, r3]
 800278e:	fa22 f303 	lsr.w	r3, r2, r3
 8002792:	4a09      	ldr	r2, [pc, #36]	; (80027b8 <HAL_RCC_ClockConfig+0x1cc>)
 8002794:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002796:	4b09      	ldr	r3, [pc, #36]	; (80027bc <HAL_RCC_ClockConfig+0x1d0>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff f98a 	bl	8001ab4 <HAL_InitTick>

  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40022000 	.word	0x40022000
 80027b0:	40021000 	.word	0x40021000
 80027b4:	080030e4 	.word	0x080030e4
 80027b8:	2000004c 	.word	0x2000004c
 80027bc:	20000050 	.word	0x20000050

080027c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b087      	sub	sp, #28
 80027c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027c6:	2300      	movs	r3, #0
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	2300      	movs	r3, #0
 80027cc:	60bb      	str	r3, [r7, #8]
 80027ce:	2300      	movs	r3, #0
 80027d0:	617b      	str	r3, [r7, #20]
 80027d2:	2300      	movs	r3, #0
 80027d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027da:	4b1e      	ldr	r3, [pc, #120]	; (8002854 <HAL_RCC_GetSysClockFreq+0x94>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f003 030c 	and.w	r3, r3, #12
 80027e6:	2b04      	cmp	r3, #4
 80027e8:	d002      	beq.n	80027f0 <HAL_RCC_GetSysClockFreq+0x30>
 80027ea:	2b08      	cmp	r3, #8
 80027ec:	d003      	beq.n	80027f6 <HAL_RCC_GetSysClockFreq+0x36>
 80027ee:	e027      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027f0:	4b19      	ldr	r3, [pc, #100]	; (8002858 <HAL_RCC_GetSysClockFreq+0x98>)
 80027f2:	613b      	str	r3, [r7, #16]
      break;
 80027f4:	e027      	b.n	8002846 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	0c9b      	lsrs	r3, r3, #18
 80027fa:	f003 030f 	and.w	r3, r3, #15
 80027fe:	4a17      	ldr	r2, [pc, #92]	; (800285c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002800:	5cd3      	ldrb	r3, [r2, r3]
 8002802:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d010      	beq.n	8002830 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800280e:	4b11      	ldr	r3, [pc, #68]	; (8002854 <HAL_RCC_GetSysClockFreq+0x94>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	0c5b      	lsrs	r3, r3, #17
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	4a11      	ldr	r2, [pc, #68]	; (8002860 <HAL_RCC_GetSysClockFreq+0xa0>)
 800281a:	5cd3      	ldrb	r3, [r2, r3]
 800281c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a0d      	ldr	r2, [pc, #52]	; (8002858 <HAL_RCC_GetSysClockFreq+0x98>)
 8002822:	fb02 f203 	mul.w	r2, r2, r3
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	fbb2 f3f3 	udiv	r3, r2, r3
 800282c:	617b      	str	r3, [r7, #20]
 800282e:	e004      	b.n	800283a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a0c      	ldr	r2, [pc, #48]	; (8002864 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002834:	fb02 f303 	mul.w	r3, r2, r3
 8002838:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	613b      	str	r3, [r7, #16]
      break;
 800283e:	e002      	b.n	8002846 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002840:	4b05      	ldr	r3, [pc, #20]	; (8002858 <HAL_RCC_GetSysClockFreq+0x98>)
 8002842:	613b      	str	r3, [r7, #16]
      break;
 8002844:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002846:	693b      	ldr	r3, [r7, #16]
}
 8002848:	4618      	mov	r0, r3
 800284a:	371c      	adds	r7, #28
 800284c:	46bd      	mov	sp, r7
 800284e:	bc80      	pop	{r7}
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	40021000 	.word	0x40021000
 8002858:	007a1200 	.word	0x007a1200
 800285c:	080030f4 	.word	0x080030f4
 8002860:	08003104 	.word	0x08003104
 8002864:	003d0900 	.word	0x003d0900

08002868 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002870:	4b0a      	ldr	r3, [pc, #40]	; (800289c <RCC_Delay+0x34>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a0a      	ldr	r2, [pc, #40]	; (80028a0 <RCC_Delay+0x38>)
 8002876:	fba2 2303 	umull	r2, r3, r2, r3
 800287a:	0a5b      	lsrs	r3, r3, #9
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	fb02 f303 	mul.w	r3, r2, r3
 8002882:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002884:	bf00      	nop
  }
  while (Delay --);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	1e5a      	subs	r2, r3, #1
 800288a:	60fa      	str	r2, [r7, #12]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1f9      	bne.n	8002884 <RCC_Delay+0x1c>
}
 8002890:	bf00      	nop
 8002892:	bf00      	nop
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr
 800289c:	2000004c 	.word	0x2000004c
 80028a0:	10624dd3 	.word	0x10624dd3

080028a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e041      	b.n	800293a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d106      	bne.n	80028d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7fe ff48 	bl	8001760 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2202      	movs	r2, #2
 80028d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	3304      	adds	r3, #4
 80028e0:	4619      	mov	r1, r3
 80028e2:	4610      	mov	r0, r2
 80028e4:	f000 fa6e 	bl	8002dc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
	...

08002944 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002952:	b2db      	uxtb	r3, r3
 8002954:	2b01      	cmp	r3, #1
 8002956:	d001      	beq.n	800295c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e035      	b.n	80029c8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2202      	movs	r2, #2
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68da      	ldr	r2, [r3, #12]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f042 0201 	orr.w	r2, r2, #1
 8002972:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a16      	ldr	r2, [pc, #88]	; (80029d4 <HAL_TIM_Base_Start_IT+0x90>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d009      	beq.n	8002992 <HAL_TIM_Base_Start_IT+0x4e>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002986:	d004      	beq.n	8002992 <HAL_TIM_Base_Start_IT+0x4e>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a12      	ldr	r2, [pc, #72]	; (80029d8 <HAL_TIM_Base_Start_IT+0x94>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d111      	bne.n	80029b6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 0307 	and.w	r3, r3, #7
 800299c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2b06      	cmp	r3, #6
 80029a2:	d010      	beq.n	80029c6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f042 0201 	orr.w	r2, r2, #1
 80029b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029b4:	e007      	b.n	80029c6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f042 0201 	orr.w	r2, r2, #1
 80029c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3714      	adds	r7, #20
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc80      	pop	{r7}
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	40012c00 	.word	0x40012c00
 80029d8:	40000400 	.word	0x40000400

080029dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d122      	bne.n	8002a38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d11b      	bne.n	8002a38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f06f 0202 	mvn.w	r2, #2
 8002a08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	f003 0303 	and.w	r3, r3, #3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f9b4 	bl	8002d8c <HAL_TIM_IC_CaptureCallback>
 8002a24:	e005      	b.n	8002a32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 f9a7 	bl	8002d7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 f9b6 	bl	8002d9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	f003 0304 	and.w	r3, r3, #4
 8002a42:	2b04      	cmp	r3, #4
 8002a44:	d122      	bne.n	8002a8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	f003 0304 	and.w	r3, r3, #4
 8002a50:	2b04      	cmp	r3, #4
 8002a52:	d11b      	bne.n	8002a8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f06f 0204 	mvn.w	r2, #4
 8002a5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2202      	movs	r2, #2
 8002a62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f98a 	bl	8002d8c <HAL_TIM_IC_CaptureCallback>
 8002a78:	e005      	b.n	8002a86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f97d 	bl	8002d7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 f98c 	bl	8002d9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	f003 0308 	and.w	r3, r3, #8
 8002a96:	2b08      	cmp	r3, #8
 8002a98:	d122      	bne.n	8002ae0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	f003 0308 	and.w	r3, r3, #8
 8002aa4:	2b08      	cmp	r3, #8
 8002aa6:	d11b      	bne.n	8002ae0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f06f 0208 	mvn.w	r2, #8
 8002ab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2204      	movs	r2, #4
 8002ab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 f960 	bl	8002d8c <HAL_TIM_IC_CaptureCallback>
 8002acc:	e005      	b.n	8002ada <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f953 	bl	8002d7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f000 f962 	bl	8002d9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	f003 0310 	and.w	r3, r3, #16
 8002aea:	2b10      	cmp	r3, #16
 8002aec:	d122      	bne.n	8002b34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	f003 0310 	and.w	r3, r3, #16
 8002af8:	2b10      	cmp	r3, #16
 8002afa:	d11b      	bne.n	8002b34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f06f 0210 	mvn.w	r2, #16
 8002b04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2208      	movs	r2, #8
 8002b0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 f936 	bl	8002d8c <HAL_TIM_IC_CaptureCallback>
 8002b20:	e005      	b.n	8002b2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f929 	bl	8002d7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 f938 	bl	8002d9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d10e      	bne.n	8002b60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d107      	bne.n	8002b60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f06f 0201 	mvn.w	r2, #1
 8002b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f7fe f8c6 	bl	8000cec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b6a:	2b80      	cmp	r3, #128	; 0x80
 8002b6c:	d10e      	bne.n	8002b8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b78:	2b80      	cmp	r3, #128	; 0x80
 8002b7a:	d107      	bne.n	8002b8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 fa6b 	bl	8003062 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b96:	2b40      	cmp	r3, #64	; 0x40
 8002b98:	d10e      	bne.n	8002bb8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba4:	2b40      	cmp	r3, #64	; 0x40
 8002ba6:	d107      	bne.n	8002bb8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 f8fc 	bl	8002db0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	f003 0320 	and.w	r3, r3, #32
 8002bc2:	2b20      	cmp	r3, #32
 8002bc4:	d10e      	bne.n	8002be4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	f003 0320 	and.w	r3, r3, #32
 8002bd0:	2b20      	cmp	r3, #32
 8002bd2:	d107      	bne.n	8002be4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f06f 0220 	mvn.w	r2, #32
 8002bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 fa36 	bl	8003050 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002be4:	bf00      	nop
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d101      	bne.n	8002c08 <HAL_TIM_ConfigClockSource+0x1c>
 8002c04:	2302      	movs	r3, #2
 8002c06:	e0b4      	b.n	8002d72 <HAL_TIM_ConfigClockSource+0x186>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2202      	movs	r2, #2
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68ba      	ldr	r2, [r7, #8]
 8002c36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c40:	d03e      	beq.n	8002cc0 <HAL_TIM_ConfigClockSource+0xd4>
 8002c42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c46:	f200 8087 	bhi.w	8002d58 <HAL_TIM_ConfigClockSource+0x16c>
 8002c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c4e:	f000 8086 	beq.w	8002d5e <HAL_TIM_ConfigClockSource+0x172>
 8002c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c56:	d87f      	bhi.n	8002d58 <HAL_TIM_ConfigClockSource+0x16c>
 8002c58:	2b70      	cmp	r3, #112	; 0x70
 8002c5a:	d01a      	beq.n	8002c92 <HAL_TIM_ConfigClockSource+0xa6>
 8002c5c:	2b70      	cmp	r3, #112	; 0x70
 8002c5e:	d87b      	bhi.n	8002d58 <HAL_TIM_ConfigClockSource+0x16c>
 8002c60:	2b60      	cmp	r3, #96	; 0x60
 8002c62:	d050      	beq.n	8002d06 <HAL_TIM_ConfigClockSource+0x11a>
 8002c64:	2b60      	cmp	r3, #96	; 0x60
 8002c66:	d877      	bhi.n	8002d58 <HAL_TIM_ConfigClockSource+0x16c>
 8002c68:	2b50      	cmp	r3, #80	; 0x50
 8002c6a:	d03c      	beq.n	8002ce6 <HAL_TIM_ConfigClockSource+0xfa>
 8002c6c:	2b50      	cmp	r3, #80	; 0x50
 8002c6e:	d873      	bhi.n	8002d58 <HAL_TIM_ConfigClockSource+0x16c>
 8002c70:	2b40      	cmp	r3, #64	; 0x40
 8002c72:	d058      	beq.n	8002d26 <HAL_TIM_ConfigClockSource+0x13a>
 8002c74:	2b40      	cmp	r3, #64	; 0x40
 8002c76:	d86f      	bhi.n	8002d58 <HAL_TIM_ConfigClockSource+0x16c>
 8002c78:	2b30      	cmp	r3, #48	; 0x30
 8002c7a:	d064      	beq.n	8002d46 <HAL_TIM_ConfigClockSource+0x15a>
 8002c7c:	2b30      	cmp	r3, #48	; 0x30
 8002c7e:	d86b      	bhi.n	8002d58 <HAL_TIM_ConfigClockSource+0x16c>
 8002c80:	2b20      	cmp	r3, #32
 8002c82:	d060      	beq.n	8002d46 <HAL_TIM_ConfigClockSource+0x15a>
 8002c84:	2b20      	cmp	r3, #32
 8002c86:	d867      	bhi.n	8002d58 <HAL_TIM_ConfigClockSource+0x16c>
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d05c      	beq.n	8002d46 <HAL_TIM_ConfigClockSource+0x15a>
 8002c8c:	2b10      	cmp	r3, #16
 8002c8e:	d05a      	beq.n	8002d46 <HAL_TIM_ConfigClockSource+0x15a>
 8002c90:	e062      	b.n	8002d58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6818      	ldr	r0, [r3, #0]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	6899      	ldr	r1, [r3, #8]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	685a      	ldr	r2, [r3, #4]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	f000 f95e 	bl	8002f62 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002cb4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68ba      	ldr	r2, [r7, #8]
 8002cbc:	609a      	str	r2, [r3, #8]
      break;
 8002cbe:	e04f      	b.n	8002d60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6818      	ldr	r0, [r3, #0]
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	6899      	ldr	r1, [r3, #8]
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f000 f947 	bl	8002f62 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	689a      	ldr	r2, [r3, #8]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ce2:	609a      	str	r2, [r3, #8]
      break;
 8002ce4:	e03c      	b.n	8002d60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6818      	ldr	r0, [r3, #0]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	6859      	ldr	r1, [r3, #4]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	f000 f8be 	bl	8002e74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2150      	movs	r1, #80	; 0x50
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f000 f915 	bl	8002f2e <TIM_ITRx_SetConfig>
      break;
 8002d04:	e02c      	b.n	8002d60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6818      	ldr	r0, [r3, #0]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	6859      	ldr	r1, [r3, #4]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	461a      	mov	r2, r3
 8002d14:	f000 f8dc 	bl	8002ed0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2160      	movs	r1, #96	; 0x60
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f000 f905 	bl	8002f2e <TIM_ITRx_SetConfig>
      break;
 8002d24:	e01c      	b.n	8002d60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6818      	ldr	r0, [r3, #0]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	6859      	ldr	r1, [r3, #4]
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	461a      	mov	r2, r3
 8002d34:	f000 f89e 	bl	8002e74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2140      	movs	r1, #64	; 0x40
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f000 f8f5 	bl	8002f2e <TIM_ITRx_SetConfig>
      break;
 8002d44:	e00c      	b.n	8002d60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4610      	mov	r0, r2
 8002d52:	f000 f8ec 	bl	8002f2e <TIM_ITRx_SetConfig>
      break;
 8002d56:	e003      	b.n	8002d60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d5c:	e000      	b.n	8002d60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d82:	bf00      	nop
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr

08002d8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bc80      	pop	{r7}
 8002d9c:	4770      	bx	lr

08002d9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bc80      	pop	{r7}
 8002dae:	4770      	bx	lr

08002db0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bc80      	pop	{r7}
 8002dc0:	4770      	bx	lr
	...

08002dc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a25      	ldr	r2, [pc, #148]	; (8002e6c <TIM_Base_SetConfig+0xa8>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d007      	beq.n	8002dec <TIM_Base_SetConfig+0x28>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002de2:	d003      	beq.n	8002dec <TIM_Base_SetConfig+0x28>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a22      	ldr	r2, [pc, #136]	; (8002e70 <TIM_Base_SetConfig+0xac>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d108      	bne.n	8002dfe <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002df2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a1a      	ldr	r2, [pc, #104]	; (8002e6c <TIM_Base_SetConfig+0xa8>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d007      	beq.n	8002e16 <TIM_Base_SetConfig+0x52>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e0c:	d003      	beq.n	8002e16 <TIM_Base_SetConfig+0x52>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a17      	ldr	r2, [pc, #92]	; (8002e70 <TIM_Base_SetConfig+0xac>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d108      	bne.n	8002e28 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a07      	ldr	r2, [pc, #28]	; (8002e6c <TIM_Base_SetConfig+0xa8>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d103      	bne.n	8002e5c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	691a      	ldr	r2, [r3, #16]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	615a      	str	r2, [r3, #20]
}
 8002e62:	bf00      	nop
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bc80      	pop	{r7}
 8002e6a:	4770      	bx	lr
 8002e6c:	40012c00 	.word	0x40012c00
 8002e70:	40000400 	.word	0x40000400

08002e74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b087      	sub	sp, #28
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	f023 0201 	bic.w	r2, r3, #1
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	011b      	lsls	r3, r3, #4
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	f023 030a 	bic.w	r3, r3, #10
 8002eb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	621a      	str	r2, [r3, #32]
}
 8002ec6:	bf00      	nop
 8002ec8:	371c      	adds	r7, #28
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bc80      	pop	{r7}
 8002ece:	4770      	bx	lr

08002ed0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b087      	sub	sp, #28
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	f023 0210 	bic.w	r2, r3, #16
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002efa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	031b      	lsls	r3, r3, #12
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f0c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	011b      	lsls	r3, r3, #4
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	621a      	str	r2, [r3, #32]
}
 8002f24:	bf00      	nop
 8002f26:	371c      	adds	r7, #28
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bc80      	pop	{r7}
 8002f2c:	4770      	bx	lr

08002f2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b085      	sub	sp, #20
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
 8002f36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	f043 0307 	orr.w	r3, r3, #7
 8002f50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	609a      	str	r2, [r3, #8]
}
 8002f58:	bf00      	nop
 8002f5a:	3714      	adds	r7, #20
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bc80      	pop	{r7}
 8002f60:	4770      	bx	lr

08002f62 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f62:	b480      	push	{r7}
 8002f64:	b087      	sub	sp, #28
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	60f8      	str	r0, [r7, #12]
 8002f6a:	60b9      	str	r1, [r7, #8]
 8002f6c:	607a      	str	r2, [r7, #4]
 8002f6e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f7c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	021a      	lsls	r2, r3, #8
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	431a      	orrs	r2, r3
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	609a      	str	r2, [r3, #8]
}
 8002f96:	bf00      	nop
 8002f98:	371c      	adds	r7, #28
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bc80      	pop	{r7}
 8002f9e:	4770      	bx	lr

08002fa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d101      	bne.n	8002fb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	e041      	b.n	800303c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a14      	ldr	r2, [pc, #80]	; (8003048 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d009      	beq.n	8003010 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003004:	d004      	beq.n	8003010 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a10      	ldr	r2, [pc, #64]	; (800304c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d10c      	bne.n	800302a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003016:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	4313      	orrs	r3, r2
 8003020:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68ba      	ldr	r2, [r7, #8]
 8003028:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	3714      	adds	r7, #20
 8003040:	46bd      	mov	sp, r7
 8003042:	bc80      	pop	{r7}
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	40012c00 	.word	0x40012c00
 800304c:	40000400 	.word	0x40000400

08003050 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	bc80      	pop	{r7}
 8003060:	4770      	bx	lr

08003062 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003062:	b480      	push	{r7}
 8003064:	b083      	sub	sp, #12
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800306a:	bf00      	nop
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	bc80      	pop	{r7}
 8003072:	4770      	bx	lr

08003074 <__libc_init_array>:
 8003074:	b570      	push	{r4, r5, r6, lr}
 8003076:	2600      	movs	r6, #0
 8003078:	4d0c      	ldr	r5, [pc, #48]	; (80030ac <__libc_init_array+0x38>)
 800307a:	4c0d      	ldr	r4, [pc, #52]	; (80030b0 <__libc_init_array+0x3c>)
 800307c:	1b64      	subs	r4, r4, r5
 800307e:	10a4      	asrs	r4, r4, #2
 8003080:	42a6      	cmp	r6, r4
 8003082:	d109      	bne.n	8003098 <__libc_init_array+0x24>
 8003084:	f000 f822 	bl	80030cc <_init>
 8003088:	2600      	movs	r6, #0
 800308a:	4d0a      	ldr	r5, [pc, #40]	; (80030b4 <__libc_init_array+0x40>)
 800308c:	4c0a      	ldr	r4, [pc, #40]	; (80030b8 <__libc_init_array+0x44>)
 800308e:	1b64      	subs	r4, r4, r5
 8003090:	10a4      	asrs	r4, r4, #2
 8003092:	42a6      	cmp	r6, r4
 8003094:	d105      	bne.n	80030a2 <__libc_init_array+0x2e>
 8003096:	bd70      	pop	{r4, r5, r6, pc}
 8003098:	f855 3b04 	ldr.w	r3, [r5], #4
 800309c:	4798      	blx	r3
 800309e:	3601      	adds	r6, #1
 80030a0:	e7ee      	b.n	8003080 <__libc_init_array+0xc>
 80030a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80030a6:	4798      	blx	r3
 80030a8:	3601      	adds	r6, #1
 80030aa:	e7f2      	b.n	8003092 <__libc_init_array+0x1e>
 80030ac:	08003108 	.word	0x08003108
 80030b0:	08003108 	.word	0x08003108
 80030b4:	08003108 	.word	0x08003108
 80030b8:	0800310c 	.word	0x0800310c

080030bc <memset>:
 80030bc:	4603      	mov	r3, r0
 80030be:	4402      	add	r2, r0
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d100      	bne.n	80030c6 <memset+0xa>
 80030c4:	4770      	bx	lr
 80030c6:	f803 1b01 	strb.w	r1, [r3], #1
 80030ca:	e7f9      	b.n	80030c0 <memset+0x4>

080030cc <_init>:
 80030cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ce:	bf00      	nop
 80030d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030d2:	bc08      	pop	{r3}
 80030d4:	469e      	mov	lr, r3
 80030d6:	4770      	bx	lr

080030d8 <_fini>:
 80030d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030da:	bf00      	nop
 80030dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030de:	bc08      	pop	{r3}
 80030e0:	469e      	mov	lr, r3
 80030e2:	4770      	bx	lr
